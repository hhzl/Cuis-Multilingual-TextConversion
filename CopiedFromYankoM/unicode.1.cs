'From Squeak3.9gamma of ''23 July 2006'' [latest update: #7056] on 12 June 2007 at 5:05:56 pm'!Smalltalk renameClassNamed: #WideStringTest as: #FourByteStringTest!ClassTestCase subclass: #FourByteStringTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unicode'!Smalltalk renameClassNamed: #WideString as: #FourByteString!!FourByteString commentStamp: 'mivsek 6/12/2007 14:31' prior: 0!This class store Unicode characters, which are less that 32 bit. It covers all languages in so called Basic Multilingual Pane like East Europen Latin, Crylic, Greek etc.Characters are stored in a byte array with uppermost byte first, least byte next.!Smalltalk renameClassNamed: #WideSymbol as: #FourByteSymbol!!FourByteSymbol commentStamp: 'mivsek 6/12/2007 15:46' prior: 0!This class represents the symbols containing 32bit Unicode characters.!String variableByteSubclass: #TwoByteString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Strings'!!TwoByteString commentStamp: 'mivsek 6/12/2007 14:32' prior: 0!This class store Unicode characters below 32 bit. It covers all languages in so called Basic Multilingual Pane like East Europen Latin, Crylic, Greek etc.Characters are stored in a byte array with uppermost byte first, least byte next. !TestCase subclass: #TwoByteStringTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unicode'!Symbol variableByteSubclass: #TwoByteSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Strings'!!TwoByteSymbol commentStamp: 'mivsek 6/12/2007 15:46' prior: 0!This class represents the symbols containing 16bit Unicode characters.!TestCase subclass: #UTF8EncodingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unicode'!Smalltalk renameClassNamed: #UTF8Benchmarking as: #UnicodeBenchmarking!Object subclass: #UnicodeBenchmarking	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unicode'!!ByteArray methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:02'!asFourByteString	^ FourByteString fromByteArray: self.! !!ByteArray methodsFor: 'accessing' stamp: 'mivsek 6/11/2007 14:12'!asTwoByteString	^TwoByteString from: self asByteString! !!CanvasDecoder methodsFor: 'decoding' stamp: 'mivsek 6/12/2007 15:34'!drawMultiText: command	| boundsEnc colorEnc  text bounds color fontIndexEnc fontIndex |	text := FourByteString fromByteArray: (command at: 2) asByteArray.	"text asByteArray printString displayAt: 800@0."	"self halt."	boundsEnc := command at: 3.	fontIndexEnc := command at: 4.	colorEnc := command at: 5.	bounds := self class decodeRectangle: boundsEnc.	fontIndex := self class decodeInteger: fontIndexEnc.	color := self class decodeColor: colorEnc.	self drawCommand: [ :c |		c drawString: text in: bounds font: (fonts at: fontIndex) color: color ]! !!CanvasEncoder methodsFor: 'drawing' stamp: 'mivsek 6/12/2007 15:14'!drawString: s from: firstIndex to: lastIndex in: boundsRect font: fontOrNil color: c	| fontIndex str |	fontIndex := self establishFont: (fontOrNil ifNil: [ TextStyle defaultFont ]).	str _ s asString copyFrom: firstIndex to: lastIndex.	str isFourByteString ifTrue: [		self sendCommand: {			String with: CanvasEncoder codeMultiText.			str asByteArray asString.			self class encodeRectangle: boundsRect.			self class encodeInteger: fontIndex.			self class encodeColor: c		}	] ifFalse: [		self sendCommand: {			String with: CanvasEncoder codeText.			str.			self class encodeRectangle: boundsRect.			self class encodeInteger: fontIndex.			self class encodeColor: c		}	].! !!Character methodsFor: 'testing' stamp: 'mivsek 6/10/2007 17:51'!isFourByteCharacter	^ value >= 65536! !!Character methodsFor: 'testing' stamp: 'mivsek 6/10/2007 17:51'!isTwoByteCharacter	^ value >= 256 and: [value < 65536]! !!Character methodsFor: 'private' stamp: 'mivsek 6/12/2007 12:22'!setIntegerValue: anInteger	"as direct setup as possible"	value := anInteger.! !!Character class methodsFor: 'private' stamp: 'mivsek 6/12/2007 12:21'!valueFromInteger: anInteger 	"Answer the Character whose valueis directly set to integer, without going through 	CharacterTable."	^self basicNew setIntegerValue: anInteger! !!CharacterScanner methodsFor: 'scanning' stamp: 'mivsek 6/12/2007 15:14'!scanCharactersFrom: startIndex to: stopIndex in: sourceString rightX: rightX stopConditions: stops kern: kernDelta	| startEncoding selector |	(sourceString isByteString) ifTrue: [^ self basicScanCharactersFrom: startIndex to: stopIndex in: sourceString rightX: rightX stopConditions: stops kern: kernDelta.].	(sourceString isFourByteString) ifTrue: [		startIndex > stopIndex ifTrue: [lastIndex _ stopIndex. ^ stops at: EndOfRun].		startEncoding _  (sourceString at: startIndex) leadingChar.		selector _ (EncodedCharSet charsetAt: startEncoding) scanSelector.		^ self perform: selector withArguments: (Array with: startIndex with: stopIndex with: sourceString with: rightX with: stopConditions with: kernDelta).	].		^ stops at: EndOfRun! !!FourByteStringTest methodsFor: 'tests - converting' stamp: 'mivsek 6/12/2007 15:08'!testAsInteger	self assert: '1796exportFixes-tkMX' asFourByteString asInteger = 1796.	self assert: 'donald' asFourByteString asInteger isNil.	self assert: 'abc234def567' asFourByteString asInteger = 234.	self assert: '-94' asFourByteString asInteger = -94.	self assert: 'foo-bar-92' asFourByteString asInteger = -92.	self assert: '1796exportFixes-tkMX' asFourByteString asSignedInteger = 1796.	self assert: 'donald' asFourByteString asSignedInteger isNil.	self assert: 'abc234def567' asFourByteString asSignedInteger = 234.	self assert: '-94' asFourByteString asSignedInteger = -94.	self assert: 'foo-bar-92' asFourByteString asSignedInteger = -92.	self assert: '1796exportFixes-tkMX' asFourByteString asUnsignedInteger = 1796.	self assert: 'donald' asFourByteString asUnsignedInteger isNil.	self assert: 'abc234def567' asFourByteString asUnsignedInteger = 234.	self assert: '-94' asFourByteString asUnsignedInteger = 94.	self assert: 'foo-bar-92' asFourByteString asUnsignedInteger = 92! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'mivsek 6/12/2007 15:41'!comeFullyUpOnReload: smartRefStream	"fix up the objects in the segment that changed size.  Anobject in the segment is the wrong size for the modern version of theclass.  Construct a fake class that is the old size.  Replace themodern class with the old one in outPointers.  Load the segment.Traverse the instances, making new instances by copying fields, andrunning conversion messages.  Keep the new instances.  Bulk forwardbecome the old to the new.  Let go of the fake objects and classes.	After the install (below), arrayOfRoots is filled in.Globalize new classes.  Caller may want to do some special install oncertain objects in arrayOfRoots.	May want to write the segment out to disk in its new form."	| mapFakeClassesToReal ccFixups receiverClassesrootsToUnhiberhate myProject existing |	RecentlyRenamedClasses _ nil.		"in case old datahanging around"	mapFakeClassesToReal _ smartRefStream reshapedClassesIn: outPointers.		"Dictionary of just the ones that change shape.Substitute them in outPointers."	ccFixups _ self remapCompactClasses: mapFakeClassesToReal				refStrm: smartRefStream.	ccFixups ifFalse: [^ self error: 'A class in the file is notcompatible'].	endMarker _ segment nextObject. 	"for enumeration of objects"	endMarker == 0 ifTrue: [endMarker _ 'End' clone].	self fixCapitalizationOfSymbols.	arrayOfRoots _ self loadSegmentFrom: segment outPointers: outPointers.		"Can't use install.  Not ready for rehashSets"	mapFakeClassesToReal isEmpty ifFalse: [		self reshapeClasses: mapFakeClassesToReal refStream:smartRefStream	].	"When a Project is stored, arrayOfRoots has all objects inthe project, except those in outPointers"	arrayOfRoots do: [:importedObject |		((importedObject isMemberOf: FourByteString) or: [importedObject isMemberOf: FourByteSymbol]) ifTrue: [			importedObject mutateJISX0208StringToUnicode.			importedObject class = FourByteSymbol ifTrue: [				"self halt."				Symbol hasInterned: importedObject asString ifTrue: [:multiSymbol |					multiSymbol == importedObjectifFalse: [						importedObjectbecomeForward: multiSymbol.					].				].			].		].		(importedObject isKindOf: TTCFontSet) ifTrue: [			existing _ TTCFontSet familyName:importedObject familyName						pointSize:importedObject pointSize.	"supplies default"			existing == importedObject ifFalse:[importedObject becomeForward: existing].		].	].	"Smalltalk garbageCollect.   MultiSymbol rehash.  These taketime and are not urgent, so don't to them.  In the normal case, nobad MultiSymbols will be found."	receiverClasses _ self restoreEndianness.		"rehash sets"	smartRefStream checkFatalReshape: receiverClasses.	"Classes in this segment."	arrayOfRoots do: [:importedObject |		importedObject class class == Metaclass ifTrue: [selfdeclare: importedObject]].	arrayOfRoots do: [:importedObject |		(importedObject isKindOf: CompiledMethod) ifTrue: [			importedObject sourcePointer > 0 ifTrue:[importedObject zapSourcePointer]].		(importedObject isKindOf: Project) ifTrue: [			myProject _ importedObject.			importedObject ensureChangeSetNameUnique.			Project addingProject: importedObject.			importedObject restoreReferences.			self dependentsRestore: importedObject.			ScriptEditorMorph writingUniversalTiles:				((importedObject projectPreferenceAt:#universalTiles) ifNil: [false])]].	rootsToUnhiberhate _ arrayOfRoots select: [:importedObject |		importedObject respondsTo: #unhibernate	"ScriptEditors and ViewerFlapTabs"	].	myProject ifNotNil: [		myProject world setProperty: #thingsToUnhibernatetoValue: rootsToUnhiberhate	].	mapFakeClassesToReal isEmpty ifFalse: [		mapFakeClassesToReal keys do: [:aFake |			aFake indexIfCompact > 0 ifTrue: [aFakebecomeUncompact].			aFake removeFromSystemUnlogged].		SystemOrganization removeEmptyCategories].	"^ self"! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'mivsek 6/12/2007 15:41'!fixCapitalizationOfSymbols	"MultiString>>capitalized was not implemented correctly. 	Fix eventual accessors and mutators here."	| sym ms |	1 to: outPointers size do:[:i|		sym := outPointers at: i.		(sym class == FourByteSymbol and:[sym size > 3]) ifTrue:[			((sym beginsWith: 'get')				and:[(sym at: 4) asInteger < 256				and:[(sym at: 4) isLowercase]]) ifTrue:[					ms _ sym asString.					ms at: 4 put: (ms at: 4) asUppercase.					ms _ ms asSymbol.					sym becomeForward: ms.			].			((sym beginsWith: 'set')				and:[(sym at: 4) asInteger < 256				and:[(sym at: 4) isLowercase				and:[sym last = $:				and:[(sym occurrencesOf: $:) = 1]]]]) ifTrue:[					ms _ sym asString.					ms at: 4 put: (ms at: 4) asUppercase.					ms _ ms asSymbol.					sym becomeForward: ms.				].			outPointers at: i put: sym.		].	].! !!JISX0208 class methodsFor: 'class methods' stamp: 'mivsek 6/12/2007 15:35'!stringFromKutenArray: anArray	| s |	s _ FourByteString new: anArray size.	1 to: anArray size do: [:i |		s at: i put: (self charAtKuten: (anArray at: i)).	].	^s.! !!MultiCharacterScanner methodsFor: 'scanning' stamp: 'mivsek 6/12/2007 15:15'!scanCharactersFrom: startIndex to: stopIndex in: sourceString rightX: rightX stopConditions: stops kern: kernDelta	| startEncoding selector |	(sourceString isByteString) ifTrue: [^ self basicScanCharactersFrom: startIndex to: stopIndex in: sourceString rightX: rightX stopConditions: stops kern: kernDelta.].	(sourceString isFourByteString) ifTrue: [		startIndex > stopIndex ifTrue: [lastIndex _ stopIndex. ^ stops at: EndOfRun].		startEncoding _  (sourceString at: startIndex) leadingChar.		selector _ (EncodedCharSet charsetAt: startEncoding) scanSelector.		^ self perform: selector withArguments: (Array with: startIndex with: stopIndex with: sourceString with: rightX with: stopConditions with: kernDelta).	].		^ stops at: EndOfRun! !!MultiCompositionScanner methodsFor: 'scanning' stamp: 'mivsek 6/12/2007 15:35'!composeFrom: startIndex inRectangle: lineRectangle	firstLine: firstLine leftSide: leftSide rightSide: rightSide	"Answer an instance of TextLineInterval that represents the next line in the paragraph."	| runLength done stopCondition |	"Set up margins"	leftMargin _ lineRectangle left.	leftSide ifTrue: [leftMargin _ leftMargin +						(firstLine ifTrue: [textStyle firstIndent]								ifFalse: [textStyle restIndent])].	destX _ spaceX _ leftMargin.	firstDestX _ destX.	rightMargin _ lineRectangle right.	rightSide ifTrue: [rightMargin _ rightMargin - textStyle rightIndent].	lastIndex _ startIndex.	"scanning sets last index"	destY _ lineRectangle top.	lineHeight _ baseline _ 0.  "Will be increased by setFont"	self setStopConditions.	"also sets font"	runLength _ text runLengthFor: startIndex.	runStopIndex _ (lastIndex _ startIndex) + (runLength - 1).	line _ (TextLine start: lastIndex stop: 0 internalSpaces: 0 paddingWidth: 0)				rectangle: lineRectangle.	presentationLine _ (TextLine start: lastIndex stop: 0 internalSpaces: 0 paddingWidth: 0)				rectangle: lineRectangle.	numOfComposition _ 0.	spaceCount _ 0.	self handleIndentation.	leftMargin _ destX.	line leftMargin: leftMargin.	presentationLine leftMargin: leftMargin.	presentation _ TextStream on: (Text fromString: (FourByteString new: text size)).	done _ false.	[done]		whileFalse: 			[stopCondition _ self scanCharactersFrom: lastIndex to: runStopIndex				in: text string rightX: rightMargin stopConditions: stopConditions				kern: kern.			"See setStopConditions for stopping conditions for composing."			(self perform: stopCondition)				ifTrue: [presentationLine lineHeight: lineHeight + textStyle leading							baseline: baseline + textStyle leading.						^ line lineHeight: lineHeight + textStyle leading							baseline: baseline + textStyle leading]]! !!MultiCompositionScanner methodsFor: 'scanning' stamp: 'mivsek 6/12/2007 15:34'!composeLine: lineIndex fromCharacterIndex: startIndex inParagraph: aParagraph 	"Answer an instance of TextLineInterval that represents the next line in the paragraph."	| runLength done stopCondition |	destX _ spaceX _ leftMargin _ aParagraph leftMarginForCompositionForLine: lineIndex.	destY _ 0.	rightMargin _ aParagraph rightMarginForComposition.	leftMargin >= rightMargin ifTrue: [self error: 'No room between margins to compose'].	lastIndex _ startIndex.	"scanning sets last index"	lineHeight _ textStyle lineGrid.  "may be increased by setFont:..."	baseline _ textStyle baseline.	baselineY _ destY + baseline.	self setStopConditions.	"also sets font"	self handleIndentation.	runLength _ text runLengthFor: startIndex.	runStopIndex _ (lastIndex _ startIndex) + (runLength - 1).	line _ TextLineInterval		start: lastIndex		stop: 0		internalSpaces: 0		paddingWidth: 0.	presentationLine _ TextLineInterval		start: lastIndex		stop: 0		internalSpaces: 0		paddingWidth: 0.	numOfComposition _ 0.	presentation _ TextStream on: (Text fromString: (FourByteString new: text size)).	spaceCount _ 0.	done _ false.	[done]		whileFalse: 			[stopCondition _ self scanCharactersFrom: lastIndex to: runStopIndex				in: text string rightX: rightMargin stopConditions: stopConditions				kern: kern.			"See setStopConditions for stopping conditions for composing."			(self perform: stopCondition)				ifTrue: [presentationLine lineHeight: lineHeight + textStyle leading							baseline: baseline + textStyle leading.						^line lineHeight: lineHeight + textStyle leading							baseline: baseline + textStyle leading]]! !!NewParagraph methodsFor: 'selection' stamp: 'mivsek 6/12/2007 15:15'!characterBlockAtPoint: aPoint 	"Answer a CharacterBlock for the character in the text at aPoint."	| line |	line _ lines at: (self lineIndexForPoint: aPoint).	^ ((text string isFourByteString) ifTrue: [		MultiCharacterBlockScanner new text: text textStyle: textStyle	] ifFalse: [CharacterBlockScanner new text: text textStyle: textStyle])		characterBlockAtPoint: aPoint index: nil		in: line! !!NewParagraph methodsFor: 'selection' stamp: 'mivsek 6/12/2007 15:15'!characterBlockForIndex: index 	"Answer a CharacterBlock for the character in text at index."	| line |	line _ lines at: (self lineIndexForCharacter: index).	^ ((text string isFourByteString) ifTrue: [		MultiCharacterBlockScanner new text: text textStyle: textStyle	] ifFalse: [		CharacterBlockScanner new text: text textStyle: textStyle	])		characterBlockAtPoint: nil index: ((index max: line first) min: text size+1)		in: line! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'mivsek 6/12/2007 15:00'!inOutdent: characterStream delta: delta	"Add/remove a tab at the front of every line occupied by the selection. Flushes typeahead.  Derived from work by Larry Tesler back in December 1985.  Now triggered by Cmd-L and Cmd-R.  2/29/96 sw"	| cr realStart realStop lines startLine stopLine start stop adjustStart indentation size numLines inStream newString outStream |		sensor keyboard.  "Flush typeahead"	cr := Character cr.	"Operate on entire lines, but remember the real selection for re-highlighting later"	realStart := self startIndex.	realStop := self stopIndex - 1.	"Special case a caret on a line of its own, including weird case at end of paragraph"	(realStart > realStop and:				[realStart < 2 or: [(paragraph string at: realStart - 1) == cr]])		ifTrue:			[delta < 0				ifTrue:					[view flash]				ifFalse:					[self replaceSelectionWith: Character tab asSymbol asText.					self selectAt: realStart + 1].			^ true].	lines := paragraph lines.	startLine := paragraph lineIndexOfCharacterIndex: realStart.	stopLine := paragraph lineIndexOfCharacterIndex: (realStart max: realStop).	start := (lines at: startLine) first.	stop := (lines at: stopLine) last.		"Pin the start of highlighting unless the selection starts a line"	adjustStart := realStart > start.	"Find the indentation of the least-indented non-blank line; never outdent more"	indentation := (startLine to: stopLine) inject: 1000 into:		[:m :l |		m := m min: (paragraph indentationOfLineIndex: l ifBlank: [:tabs | 1000])].				size :=  stop + 1 - start.	numLines := stopLine + 1 - startLine.	inStream := ReadStream on: paragraph string from: start to: stop.	newString := FourByteString new: size + ((numLines * delta) max: 0).	outStream := ReadWriteStream on: newString.	"This subroutine does the actual work"	self indent: delta fromStream: inStream toStream: outStream.	"Adjust the range that will be highlighted later"	adjustStart ifTrue: [realStart := (realStart + delta) max: start].	realStop := realStop + outStream position - size.	"Prepare for another iteration"	indentation := indentation + delta.	size := outStream position.	inStream := outStream setFrom: 1 to: size.	outStream == nil		ifTrue: 	"tried to outdent but some line(s) were already left flush"			[view flash]		ifFalse:			[self selectInvisiblyFrom: start to: stop.			size = newString size ifFalse: [newString _ outStream contents].			self replaceSelectionWith: newString asText].	self selectFrom: realStart to: realStop. 	"highlight only the original range"	^ true! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'mivsek 6/12/2007 15:32'!decodeString: string andRuns: runsRaw	| strm runLength runValues newString index |	strm _ ReadStream on: runsRaw from: 1 to: runsRaw size.	(strm peekFor: $( ) ifFalse: [^ nil].	runLength _ OrderedCollection new.	[strm skipSeparators.	 strm peekFor: $)] whileFalse: 		[runLength add: (Number readFrom: strm)].	runValues _ OrderedCollection new.	[strm atEnd not] whileTrue: 		[runValues add: (Number readFrom: strm).		strm next.].	newString _ FourByteString new: string size.	index _ 1.	runLength with: runValues do: [:length :leadingChar |		index to: index + length - 1 do: [:pos |			newString at: pos put: (Character leadingChar: leadingChar code: (string at: pos) charCode).		].		index _ index + length.	].	^ newString.! !!SmartRefStream methodsFor: 'conversion' stamp: 'mivsek 6/12/2007 15:33'!multiStringx0	^ FourByteString! !!SmartRefStream methodsFor: 'conversion' stamp: 'mivsek 6/12/2007 15:40'!multiSymbolx0	^ FourByteSymbol! !!SmartRefStream methodsFor: 'import image segment' stamp: 'mivsek 6/12/2007 15:43'!mapClass: newClass origName: originalName	"See if instances changed shape.  If so, make a fake class for the old shape and return it.  Remember the original class name."	| newName oldInstVars fakeClass |	newClass isMeta ifTrue: [^ newClass].	newName _ newClass name.	(steady includes: newClass) & (newName == originalName) ifTrue: [^ newClass].		"instances in the segment have the right shape"	oldInstVars _ structures at: originalName ifAbsent: [			self error: 'class is not in structures list'].	"Missing in object file"	"Allow mapping from old to new string names"	(newName == #ByteString and:[originalName == #String]) ifTrue:[^newClass].	(newName == #FourByteString and:[originalName == #MultiString]) ifTrue:[^newClass].	(newName == #FourByteSymbol and:[originalName == #MultiSymbol]) ifTrue:[^newClass].	fakeClass _ Object subclass: ('Fake37', originalName) asSymbol		instanceVariableNames: oldInstVars allButFirst		classVariableNames: ''		poolDictionaries: ''		category: 'Obsolete'.	ChangeSet current removeClassChanges: fakeClass name.	"reduce clutter"	^ fakeClass! !!SmartRefStream methodsFor: 'read write' stamp: 'mivsek 6/12/2007 15:42'!readInstanceSize: instSize clsname: className refPosn: refPosn	"The common code to read the contents of an arbitrary instance.	 ASSUMES: readDataFrom:size: sends me beginReference: after it	   instantiates the new object but before reading nested objects.	 NOTE: We must restore the current reference position after	   recursive calls to next.Three cases for files from older versions of the system:1) Class has not changed shape, read it straight.2) Class has changed instance variables (or needs fixup).  Call a particular method to do it.3) There is a new class instead.  Find it, call a particular method to read.	All classes used to construct the structures dictionary *itself* need to be in 'steady' and they must not change!!  See setStream:"	| anObject newName newClass dict oldInstVars isMultiSymbol |	self flag: #bobconv.		self setCurrentReference: refPosn.  "remember pos before readDataFrom:size:"	newName _ renamed at: className ifAbsent: [className].	isMultiSymbol _ newName = #MultiSymbol or: [newName = #FourByteSymbol].	"isMultiSymbol ifTrue: [self halt]."	newClass _ Smalltalk at: newName asSymbol.	(steady includes: newClass) & (newName == className) ifTrue: [	 	anObject _ newClass isVariable "Create it here"			ifFalse: [newClass basicNew]			ifTrue: [newClass basicNew: instSize - (newClass instSize)].		anObject _ anObject readDataFrom: self size: instSize.		self setCurrentReference: refPosn.  "before returning to next"		isMultiSymbol ifTrue: [^ Symbol intern: anObject asString].		^ anObject].	oldInstVars _ structures at: className ifAbsent: [			self error: 'class is not in structures list'].	"Missing in object file"	anObject _ newClass createFrom: self size: instSize version: oldInstVars.		"only create the instance"	self beginReference: anObject.	dict _ self catalogValues: oldInstVars size: instSize.		"indexed vars as (1 -> val) etc."	dict at: #ClassName put: className.	"so conversion method can know it"	"Give each superclass a chance to make its changes"	self storeInstVarsIn: anObject from: dict.	"ones with the same names"	anObject _ self applyConversionMethodsTo: anObject className: className varMap: dict.	self setCurrentReference: refPosn.  "before returning to next"	isMultiSymbol ifTrue: [^ Symbol intern: anObject asString].	^ anObject! !!String methodsFor: 'testing' stamp: 'mivsek 6/12/2007 15:14'!isFourByteString	"Answer whether the receiver is a FourByteString"	^false! !!String methodsFor: 'testing' stamp: 'mivsek 6/12/2007 15:14'!isTwoByteString	"Answer whether the receiver is a TwoByteString"	^false! !!String methodsFor: '*Aida' stamp: 'mivsek 6/11/2007 13:43'!contentsAsMethod	"return a body of method with a literal array with contents of that string"	| input output |	input := self readStream.	output := WriteStream with: String new.	output nextPutAll: '^#('.	[ [input atEnd] whileFalse: [output nextPutAll: input next asInteger asString; nextPut: $ ].	output nextPutAll: ')' ]		ensure: [input close].	^output contents" 'visual.cha'contentsAsMethod "! !!ByteString methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:30'!at: index put: aCharacter	"Primitive. Store the Character in the field of the receiver indicated by	the index. Fail if the index is not an Integer or is out of bounds, or if	the argument is not a Character. Essential. See Object documentation	whatIsAPrimitive."	"also converts to TwoByteString or FourByteString if aCharacter is wider than 8 bit"	<primitive: 64>	aCharacter isCharacter 		ifFalse:[^self errorImproperStore].	aCharacter isOctetCharacter ifFalse:[		aCharacter isTwoByteCharacter			ifTrue:				["Convert to TwoByteString"				self becomeForward: (TwoByteString from: self).				^self at: index put: aCharacter]			ifFalse: 				["Convert to FourByteString"				self becomeForward: (FourByteString from: self).				^self at: index put: aCharacter].	].	index isInteger		ifTrue: [self errorSubscriptBounds: index]		ifFalse: [self errorNonIntegerIndex]! !!ByteString methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:31'!replaceFrom: start to: stop with: replacement startingAt: repStart 	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."	<primitive: 105>	replacement class == FourByteString ifTrue: [		self becomeForward: (FourByteString from: self).	]. 	super replaceFrom: start to: stop with: replacement startingAt: repStart.! !!ByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 15:24'!asByteString	^self ! !!ByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 15:24'!asFourByteString	^FourByteString from: self ! !!ByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 14:39'!asTwoByteString	^TwoByteString from: self ! !!ByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 12:32'!asUTF8String	"return an UTF-8 encoded ByteString from receiver, which is expected to contain	Unicode characters. Why here? ByteString knows best, how efficienlty do a conversion"	| in out byte |	in := self readStream. 	out := (ByteArray new: self size "approximatelly") writeStream.	[in atEnd] whileFalse:		[byte := in next asInteger.		((byte bitAnd: 2r10000000) = 0) "high bit not set = pure ASCII character" 			ifTrue: [out nextPut: byte]			ifFalse: 										"if whole byte is yyzzzzzz"				[out nextPut: (2r11000000 bitOr: (byte bitShift: -6)).             "110000yy"				out nextPut: (2r10000000 bitOr: (byte bitAnd: 2r00111111))] ]. "10zzzzzz"	^out contents asString				"see Wikipedia at http://en.wikipedia.org/wiki/UTF-8"! !!ByteString methodsFor: 'converting' stamp: 'mivsek 6/10/2007 23:28'!asUnicodeString	"return a proper unicode string from UTF-8 encoded ByteString. Resulting string 	can be BytString, TwoByteString or FourByteString, depending on characters in receiver"	| in out byte chint |	in := self readStream.	out := (ByteString new: self size "approximatelly") writeStream.	[in atEnd] whileFalse:		[byte := in next asInteger.		((byte bitAnd: 2r10000000) = 0) "high bit not set = pure ASCII character" 			ifTrue: [out nextPut: byte asCharacter]			ifFalse: 		"read bytes until belong to the same char"				[chint := (byte bitAnd: 2r1111000) = 2r111100  "four byte char" 					ifTrue: [byte bitAnd: 2r00000111] ifFalse: [byte bitAnd: 2r00011111].				[in atEnd not and: [(in peek asInteger bitShift: -6) = 2r10]] 					whileTrue:  "while belongs to the same character"						[chint := (chint bitShift: 6) + (in next asInteger bitAnd: 2r00111111)].				out nextPut: chint asCharacter] ].	^out contents				"see Wikipedia at http://en.wikipedia.org/wiki/UTF-8"! !!FourByteString methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:01'!replaceFrom: start to: stop with: replacement startingAt: repStart 	<primitive: 105>	replacement class == String ifTrue: [		^ self replaceFrom: start to: stop with: (replacement asFourByteString) startingAt: repStart.	]. 	^ super replaceFrom: start to: stop with: replacement startingAt: repStart.! !!FourByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 15:25'!asFourByteString	^self! !!FourByteString methodsFor: 'testing' stamp: 'mivsek 6/12/2007 15:17'!isFourByteString	"Answer whether the receiver is a FourByteString"	^true! !!FourByteSymbol methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:31'!species	"Answer the preferred class for reconstructing the receiver."	^FourByteString! !!String class methodsFor: 'instance creation' stamp: 'mivsek 6/12/2007 15:35'!with: aCharacter	| newCollection |	newCollection := aCharacter isOctetCharacter		ifTrue:[ByteString new: 1]		ifFalse:			[aCharacter isTwoByteCharacter				ifTrue: [TwoByteString new: 1]				ifFalse: [FourByteString new: 1] ]. 	newCollection at: 1 put: aCharacter.	^newCollection! !!StringTest methodsFor: 'as yet unclassified' stamp: 'mivsek 6/12/2007 15:09'!testEquality	self assert: 'abc' = 'abc' asFourByteString.	self assert: 'abc' asFourByteString = 'abc'.	self assert: 		((ByteArray with: 97 with: 0 with: 0 with: 0) asString ~= 'a000' asFourByteString).	self assert: 		('a000' asFourByteString ~= (ByteArray with: 97 with: 0 with: 0 with: 0) asString).	self assert: ('abc' sameAs: 'aBc' asFourByteString).	self assert: ('aBc' asFourByteString sameAs: 'abc').	self assert: ((ByteArray with: 97 with: 0 with: 0 with: 0) asString 						sameAs: 'Abcd' asFourByteString) not.	self assert: ('a000' asFourByteString sameAs: 					(ByteArray with: 97 with: 0 with: 0 with: 0) asString) not.! !!StringTest methodsFor: 'tests - indexOf' stamp: 'mivsek 6/12/2007 15:04'!testIndexOf		"test for http://bugs.impara.de/view.php?id=3574"	self assert: ('abc-' asFourByteString indexOfAnyOf: (CharacterSet newFrom: ' -0123456789')) = 4.	self assert: ('ab7' asFourByteString indexOfAnyOf: (CharacterSet newFrom: ' -0123456789')) = 3.	self assert: ('a2c' asFourByteString indexOfAnyOf: (CharacterSet newFrom: ' -0123456789')) = 2.	self assert: ('3bc' asFourByteString indexOfAnyOf: (CharacterSet newFrom: ' -0123456789')) = 1.	self assert: ('abc' asFourByteString indexOfAnyOf: (CharacterSet newFrom: ' -0123456789')) = 0.		"extension to wide characters"	self assert: ((String with: 803 asCharacter with: 811 asCharacter) indexOfAnyOf: (CharacterSet newFrom: (String with: 811 asCharacter with: 812 asCharacter))) = 2.		self assert: ('abc' indexOfAnyOf: (CharacterSet newFrom: (String with: 811 asCharacter with: 812 asCharacter))) = 0.		self assert: ('abc' indexOfAnyOf: (CharacterSet newFrom: (String with: 811 asCharacter with: $c))) = 3.! !!Symbol class methodsFor: 'instance creation' stamp: 'mivsek 6/12/2007 15:42'!intern: aStringOrSymbol 	^(self lookup: aStringOrSymbol) ifNil:[		| aClass aSymbol |		aStringOrSymbol isSymbol ifTrue:[			aSymbol _ aStringOrSymbol.		] ifFalse:[			aClass := aStringOrSymbol isOctetString ifTrue:[ByteSymbol] ifFalse:[FourByteSymbol].			aSymbol := aClass new: aStringOrSymbol size.			aSymbol string: aStringOrSymbol.		].		NewSymbols add: aSymbol.		aSymbol].! !!Text methodsFor: 'converting' stamp: 'mivsek 6/12/2007 15:00'!asOctetStringText	string class == FourByteString ifTrue: [		^ self class string: string asOctetString runs: self runs copy.	].	^self.! !!TwoByteString methodsFor: 'private' stamp: 'mivsek 6/10/2007 20:23'!byteSize	^self basicSize! !!TwoByteString methodsFor: 'private' stamp: 'mivsek 6/11/2007 00:01'!indexOfSubCollection: sub startingAt: start ifAbsent: exceptionBlock	"does not acount for uppercase/lovercasse as String's one!! "	"Answer the index of the receiver's first element, such that that element 	equals the first element of sub, and the next elements equal 	the rest of the elements of sub. Begin the search at element 	start of the receiver. If no such match is found, answer the result of 	evaluating argument, exceptionBlock."	| first index |	sub isEmpty ifTrue: [^ exceptionBlock value].	first _ sub first.	start to: self size - sub size + 1 do:		[:startIndex |		(self at: startIndex) = first ifTrue:			[index _ 1.			[(self at: startIndex+index-1) = (sub at: index)]				whileTrue:				[index = sub size ifTrue: [^startIndex].				index _ index+1]]].	^ exceptionBlock value! !!TwoByteString methodsFor: 'private' stamp: 'mivsek 6/10/2007 20:16'!printString	^self asByteString printString! !!TwoByteString methodsFor: 'private' stamp: 'mivsek 6/10/2007 23:35'!replaceFrom: start to: stop with: replacement startingAt: repStart 	"This destructively replaces elements from start to stop in the receiver 	starting at index, repStart, in the sequenceable collection, 	replacementCollection. Answer the receiver. No range checks are 	performed."	| index repOff prepared |	prepared := replacement asTwoByteString.	repOff := repStart - start.	index := start - 1.	[(index := index + 1) <= stop]		whileTrue: [self at: index put: (prepared at: repOff + index)]! !!TwoByteString methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 16:03'!at: index 	"return a character at index by putting two consequent bytes together"	^ Character valueFromInteger: (((super at: index*2-1) bitShift: 8) + (super at: index*2))! !!TwoByteString methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:31'!at: index put: aCharacter	"Store the Character in the field of the receiver indicated by	the index as sequence of two bytes. Fail if the index is not an Integer or is out of bounds, 	or if the argument is not a Character"	index isInteger ifFalse: [self errorNonIntegerIndex].	aCharacter isCharacter ifFalse:[^self errorImproperStore].	aCharacter isFourByteCharacter ifTrue:[		"Convert to FourByteString"		self becomeForward: (FourByteString from: self).		^self at: index put: aCharacter].	super at: index*2-1 put: (aCharacter asInteger bitShift: -8). "upper byte"	super at: index*2 put: (aCharacter asInteger bitAnd: 255). "lower byte"! !!TwoByteString methodsFor: 'accessing' stamp: 'mivsek 6/10/2007 21:05'!size	"each character has two bytes, therefore basicSize/2"	^self basicSize bitShift: -1! !!TwoByteString methodsFor: 'converting' stamp: 'mivsek 6/10/2007 21:07'!asByteString	"return a ByteString if noone character code point is higher that 256"	| out index |	out := (ByteString new: self byteSize) writeStream.	index := 1.	[index <= self basicSize] whileTrue:		[(self basicAt: index) = 0 ifFalse: 			[^self error:  'cannot convert to ByteString, it contains characters > 256!!'].		out nextPut: (self basicAt: index+1) asCharacter.		index := index + 2].	^out contents! !!TwoByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 15:28'!asFourByteString	"return a FourByteString"	| out index |	out := (FourByteString new: self size) writeStream.	index := 1.	[index <= self size] whileTrue:		[out nextPut: (((self basicAt: index) bitShift: 8) + (self basicAt: index+1)) asCharacter.		index := index + 2].	^out contents! !!TwoByteString methodsFor: 'converting' stamp: 'mivsek 6/10/2007 18:58'!asTwoByteString	^self! !!TwoByteString methodsFor: 'converting' stamp: 'mivsek 6/12/2007 12:38'!asUTF8String	"return an UTF-8 encoded ByteString from receiver"	| in out word |	in := self readStream. 	out := (ByteArray new: self size "approximatelly") writeStream.	[in atEnd] whileFalse:		[word := in next asInteger.		((word bitShift: -7) = 0)  "below 127 = pure ASCII character" 			ifTrue: [out nextPut: word]			ifFalse: 	[((word bitShift: -11) = 0)  "below 07FF = two bytes in UTF-8" 				ifTrue: 					[out nextPut: 									"110yyyyy"						(2r11000000 bitOr: (word bitShift: -6)).					out nextPut: 									"10zzzzzz"						(2r10000000 bitOr: (word bitAnd: 2r00111111))] 				 ifFalse: "rest characters up to FFFF"					[out nextPut: 									"1110xxxx"						(2r11100000 bitOr: (word bitShift: -12)). 					out nextPut: 									"10yyyyyy"						(2r10000000 bitOr: ((word bitShift: -6) bitAnd: 2r00111111)). 					out nextPut: 									"10zzzzzz"						(2r10000000 bitOr: (word bitAnd: 2r00111111))]]]. 	^out contents asString				"see Wikipedia at http://en.wikipedia.org/wiki/UTF-8"! !!TwoByteString methodsFor: 'testing' stamp: 'mivsek 6/12/2007 15:18'!isTwoByteString	"Answer whether the receiver is a TwoByteString"	^true! !!TwoByteString class methodsFor: 'instance creation' stamp: 'mivsek 6/10/2007 19:03'!from: aByteString 	"converts to TwoByteString"	| newString index |	(aByteString isMemberOf: self) ifTrue: [^ aByteString copy].	newString := self new: aByteString size.	index := 1.	aByteString do: [:char | 		newString basicAt: index put: 0.		newString basicAt: index+1 put: char asInteger.		index := index + 2].	^ newString! !!TwoByteString class methodsFor: 'instance creation' stamp: 'mivsek 6/11/2007 14:18'!fromWordArray: aWordArray 	"converts to TwoByteString"	| newString index |	newString := self new: aWordArray size.	index := 1.	aWordArray do: [:element | 		newString basicAt: index put: (element bitShift: -8).		newString basicAt: index+1 put: (element bitAnd: 16rFF).		index := index + 2].	^ newString! !!TwoByteString class methodsFor: 'private' stamp: 'mivsek 6/10/2007 18:52'!new: aSize	^super new: aSize*2 "because we use two bytes per character!!"! !!TwoByteStringTest methodsFor: 'tests' stamp: 'mivsek 6/12/2007 14:39'!testConversions	self assert: 'abc' asTwoByteString asByteString = 'abc'.	"auto conversion to TwoByteString"	self assert: ('abc ' at: 4 put: 1244 asCharacter; yourself) class = TwoByteString. ! !!TwoByteStringTest methodsFor: 'tests' stamp: 'mivsek 6/12/2007 13:31'!testSizes	self assert: 'abc' asTwoByteString size = 3.! !!TwoByteSymbol methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 16:03'!at: index 	"return a character at index by putting two consequent bytes together"	^ Character valueFromInteger: (((super at: index*2-1) bitShift: 8) + (super at: index*2))! !!TwoByteSymbol methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 16:04'!at: index put: aCharacter	"You cannot modify the receiver."	self errorNoModification! !!TwoByteSymbol methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 16:05'!species	"Answer the preferred class for reconstructing the receiver."	^TwoByteString! !!TwoByteSymbol methodsFor: 'private' stamp: 'mivsek 6/12/2007 16:09'!pvtAt: index put: aCharacter	super at: index*2-1 put: (aCharacter asInteger bitShift: -8). "upper byte"	super at: index*2 put: (aCharacter asInteger bitAnd: 255). "lower byte"! !!TwoByteSymbol methodsFor: 'private' stamp: 'mivsek 6/12/2007 16:10'!string: aString	1 to: aString size do: [:j | self pvtAt: j put: (aString at: j)].	^self! !!UTF8EncodingTest methodsFor: 'tests' stamp: 'mivsek 6/10/2007 22:48'!testLatin1	| utf8 string |	string := 'abc ' at: 4 put: 233 asCharacter; yourself.	self assert: string class = ByteString.	utf8 := string asUTF8String.	self assert: utf8 = #(97 98 99 195 169) asByteArray asString.	"from UTF-8"	self assert: utf8 asUnicodeString class = ByteString.	self assert: utf8 asUnicodeString = string.! !!UTF8EncodingTest methodsFor: 'tests' stamp: 'mivsek 6/12/2007 14:39'!testLatin2	| utf8 string |	string := 'abc ' at: 4 put: 16r017D "381=Z^" asCharacter; yourself. 	self assert: string class = TwoByteString.	utf8 := string asUTF8String.	self assert: utf8 = #(97 98 99 197 189) asByteArray asString.	"from UTF-8"	self assert: utf8 asUnicodeString class = TwoByteString.	self assert: utf8 asUnicodeString = string. 	! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:54'!chineseText	"2500 characters, Unicode encoding"	"self new chineseText"^#(21382 21490 13 10 24191 20041 19978 30340 26149 33410 32852 27426 26202 20250 22312 20013 22830 30005 35270 21488 30340 21382 21490 21487 20197 36861 28335 21040 49 57 53 56 24180 65292 24403 26102 30340 21271 20140 30005 35270 21488 65288 20170 20013 22830 30005 35270 21488 21069 36523 65289 23601 22312 38500 22805 25773 20986 20102 19968 37096 32852 27426 26202 20250 24615 36136 30340 30005 35270 29255 65292 24403 26102 30340 24456 22810 22823 24072 37117 26366 32463 20986 38236 65292 22914 20140 21095 22823 24072 26757 20848 33459 12289 30456 22768 22823 24072 20399 23453 26519 12289 20154 27665 33402 26415 23478 32769 33293 31561 20154 65292 20294 36825 19968 33410 30446 27809 26377 22312 30005 35270 19978 24310 32493 19979 26469 12290 33258 49 57 55 57 24180 38500 22805 24320 22987 65292 20013 22830 30005 35270 21488 27599 24180 25773 20986 20855 26377 26149 26202 24615 36136 30340 8220 36814 26032 26149 25991 33402 26202 20250 8221 65292 49 57 56 51 24180 39318 23626 29616 22330 30452 25773 24418 24335 30340 26149 33410 32852 27426 26202 20250 22312 20013 22830 30005 35270 21488 25773 20986 65292 20174 27492 27599 24180 20892 21382 38500 22805 21271 20140 26102 38388 26202 56 26102 65288 26089 26399 26366 32463 22312 56 28857 20043 21069 24320 22987 25773 20986 65289 65292 26149 33410 32852 27426 26202 20250 37117 20250 22312 20013 22830 30005 35270 21488 25773 20986 65292 33410 30446 26102 38388 25345 32493 53 20010 23567 26102 24038 21491 65292 30452 21040 20940 26216 49 26102 65292 33410 30446 26368 21518 20197 12298 38590 24536 20170 23477 12299 21512 21809 32467 26463 32 65288 27492 26354 26159 20026 49 57 56 52 24180 26149 33410 26202 20250 21019 20316 30340 65292 21518 34987 49 57 56 53 12289 49 57 56 54 12289 49 57 57 48 26202 20250 20316 20026 32467 26463 26354 65292 24182 20174 49 57 57 48 24180 27839 29992 33267 20170 65289 12290 39318 23626 26149 33410 32852 27426 26202 20250 23601 24320 21019 20102 24456 22810 20808 20363 65292 27604 22914 35774 31435 33410 30446 20027 25345 20154 12289 23454 20917 30452 25773 12289 24320 35774 28909 32447 30005 35805 31561 65292 36825 20123 21019 26032 20808 20363 25104 20026 26085 21518 26149 26202 19968 30452 27839 29992 30340 8220 35268 30697 8221 12290 13 10 91 32534 36753 93 32 32463 20856 33410 30446 13 10 21382 24180 30340 26149 33410 32852 27426 26202 20250 24635 35201 20026 20154 20204 30041 19979 19968 20123 32463 20856 33410 30446 13 10 49 57 56 51 24180 65306 12298 20065 24651 12299 65306 22240 22312 26576 31181 31243 24230 19978 26446 35895 19968 27169 20223 37011 20029 21531 30340 28436 21809 39118 26684 32780 22312 27492 21069 39281 21463 20105 35758 30340 27468 26354 12298 20065 24651 12299 26159 24403 24180 35266 20247 28857 25773 26368 22810 30340 19968 20010 33410 30446 65292 24182 22312 26202 20250 20013 25773 20986 65292 25104 20026 32463 20856 20107 20214 21644 32463 20856 33410 30446 12290 40644 19968 40548 12289 37011 22312 20891 20316 21697 12290 13 10 49 57 56 52 24180 65306 12298 23431 23449 29260 39321 28895 12299 65306 39532 23395 30340 36825 27573 21333 21475 30456 22768 22570 31216 26032 30456 22768 20013 30340 32463 20856 20043 20316 12290 12298 25105 30340 20013 22269 24515 12299 26469 33258 39321 28207 30340 27468 25163 24352 26126 25935 22312 36825 19968 24180 30331 38470 26149 26202 65292 19968 26354 12298 25105 30340 20013 22269 24515 12299 25104 20026 30070 24180 26368 27969 34892 30340 19968 39318 27468 26354 12290 40644 19968 40548 20316 21697 65292 26412 23626 26149 26202 20174 24403 26102 30340 31038 20250 24433 21709 21147 26469 35828 24050 25104 20026 19968 24231 19981 21487 36926 36234 30340 39640 23792 12290 13 10 49 57 56 52 24180 65306 12298 21507 38754 26465 12299 65306 38472 20329 26031 12289 26417 26102 33538 39318 27425 25645 26723 34920 28436 30340 23567 21697 24341 36215 36720 21160 65292 23567 21697 36825 31181 28436 20986 24418 24335 20063 26159 22240 26149 26202 32780 20135 29983 30340 12290 21518 26469 20108 20154 30340 37197 21512 20063 25104 20026 26149 26202 20013 30340 19968 20010 20142 28857 12290 13 10 49 57 56 53 24180 65306 12298 21313 20116 30340 26376 20142 12299 65306 40644 19968 40548 20316 21697 12290 26412 23626 26149 26202 24808 36973 28369 38081 21346 65307 36208 20986 28436 25773 23460 36827 20837 20307 32946 22330 30340 23581 35797 22833 36133 65307 26202 20250 35843 24230 20960 20046 22833 25511 12290 13 10 49 57 56 54 24180 65306 12298 32650 32905 20018 12299 12289 12298 26149 20809 32654 12299 65306 40644 19968 40548 30340 32763 36523 20183 25171 24471 25104 21151 12290 13 10 49 57 56 55 24180 65306 12298 20908 22825 37324 30340 19968 25226 28779 12299 36153 32724 24403 24180 30340 19968 25226 28779 20256 21809 22823 34903 23567 24055 12290 37011 22312 20891 20316 21697 12290 26412 23626 26202 20250 34987 19968 20123 35780 35770 23478 35748 20026 33402 26415 27700 24179 36798 21040 19968 20010 26032 39640 23792 12290 13 10 49 57 56 56 24180 65306 12298 24039 31435 21517 30446 12299 65306 36825 27573 30001 29275 32676 12289 26446 31435 23665 21512 20316 34920 28436 30340 30456 22768 36763 36771 22320 35773 21050 20102 20844 27454 21507 21917 30340 19981 27491 20043 39118 65292 22312 20043 21518 30340 24456 38271 19968 27573 26102 38388 8220 39046 23548 65292 20882 21495 8221 20960 20046 25104 20102 20195 34920 29275 32676 30340 31526 21495 12290 37011 22312 20891 20316 21697 12290 36825 23626 26149 33410 26202 20250 30452 25773 20013 26377 24456 22810 23567 20107 25925 65307 29616 22312 21457 34892 30340 38899 20687 21046 21697 20013 37319 29992 20102 24456 22810 24425 25490 26102 30340 30011 38754 12290 20027 25345 20154 34203 39134 12289 21355 21326 22312 49 57 56 57 24180 21518 20174 23631 24149 19978 28040 22833 65307 33865 25391 26848 22312 28436 21809 12298 28216 23376 24515 12299 26102 38505 20123 36300 20498 12290 13 10 49 57 56 57 24180 65306 12298 29233 30340 22857 29486 12299 12289 12298 33521 38596 27597 20146 30340 19968 22825 12299 65306 36213 23433 12289 24352 26195 28023 32852 21512 25191 23548 65292 20142 28857 33410 30446 20247 22810 12290 13 10 49 57 57 48 24180 65306 12298 30456 20146 12299 65306 36213 26412 23665 12289 23435 31062 33521 39318 27425 30331 19978 26149 26202 33310 21488 65307 40644 19968 40548 26368 21518 19968 23626 26149 26202 22312 24418 24335 19978 26377 36827 34892 20102 21191 25954 30340 25506 32034 65292 20196 20154 38054 20329 12290 13 10 49 57 57 49 24180 65306 12298 25163 25289 25163 12299 65306 25226 40644 23439 21644 23435 20025 20025 30340 21517 23383 36830 22312 20102 19968 36215 12290 26412 23626 26202 20250 27809 26377 21517 20041 19978 30340 24635 23548 28436 65292 37049 21451 24320 25361 22823 26753 12290 13 10 49 57 57 50 24180 65306 12298 24515 20013 24120 39547 33459 21326 12299 12290 36213 23433 39318 27425 29420 31435 25191 23548 20043 20316 65292 24182 19981 25104 21151 65307 13 10 49 57 57 51 24180 65306 12298 28059 22768 20381 26087 12299 25447 32418 20102 27611 23425 12290 24373 23376 25562 20316 21697 65292 25512 20986 20102 27604 36739 39640 38597 30340 20004 26869 26641 21644 24352 19977 20854 20154 12290 13 10 49 57 57 52 24180 65306 33891 25991 33775 30340 12298 38271 22478 38271 12299 24403 26102 32418 36941 20102 22823 27743 21335 21271 12290 12298 25171 25169 20811 12299 12290 37070 26118 20316 21697 65292 24635 20307 32467 26500 20005 35880 65292 24369 22312 27468 26354 65292 26159 49 57 56 52 24180 26469 21807 19968 27809 26377 28207 21488 27468 26143 30340 19968 23626 12290 13 10 49 57 57 53 24180 65306 12298 22914 27492 21253 35013 12299 21407 35780 21095 28436 21592 36213 20029 33993 30340 23567 21697 32463 20856 20043 20316 32 12290 36213 23433 20316 21697 65292 20197 25214 20048 20026 20027 39064 65292 25104 21151 22320 24320 21019 20102 26149 26202 26032 24605 36335 12290 13 10 49 57 57 54 24180 65306 12298 25171 24037 22855 36935 12299 36213 20029 33993 21644 24041 27721 26519 30340 23567 21697 32463 20856 20043 20316 12290 24352 26195 28023 20316 21697 65292 19977 22320 32852 25773 24418 24335 26032 39062 65292 20316 21697 38472 26087 20047 21892 21487 38472 12290 13 10 49 57 57 55 24180 65306 12298 26149 22825 30340 25925 20107 12299 12290 38899 20048 21095 12298 22320 20037 22825 38271 12299 12290 34945 24503 26106 20316 21697 65292 20013 35268 20013 30697 12290 13 10 49 57 57 56 24180 65306 12298 30456 32422 57 56 12299 12289 12298 22823 20013 22269 12299 12290 23391 27427 20316 21697 65292 28207 21488 33410 30446 35774 35745 24471 26368 20026 25104 21151 30340 19968 23626 12290 13 10 49 57 57 57 24180 65306 12298 26152 22825 183 20170 22825 183 26126 22825 12299 20026 36213 26412 23665 23567 21697 30340 32463 20856 20043 20316 65307 12298 24120 22238 23478 30475 30475 12299 65307 32508 33402 22823 35266 20116 20301 23548 28436 32852 21512 25191 23548 12290 24635 20307 24179 28129 65292 20294 20142 28857 31361 20986 12290 13 10 50 48 48 48 24180 65306 12298 38047 28857 24037 12299 65306 36825 37096 23567 21697 20026 20013 25991 20114 32852 32593 36129 29486 20102 19968 20010 20351 29992 29575 24456 39640 30340 26032 21517 35789 8220 39532 30002 8221 12290 36213 23433 12289 24352 26195 28023 32852 21512 25191 23548 65292 29256 22359 32467 26500 24418 24335 26032 39062 65292 20294 33410 30446 27604 36739 20940 20081 65292 20313 21619 19981 36275 12290 13 10 50 48 48 49 24180 65306 12298 21334 25296 12299 58 8220 25105 21487 20197 25226 22909 20154 35828 30264 20102 33 25226 30264 20154 35828 30251 33 8221 36825 20010 23567 21697 35773 21050 20102 31038 20250 19978 20247 22810 30340 39575 23376 65292 20063 25104 20026 20102 36213 26412 23665 36229 36234 33258 24049 30340 32463 20856 20043 20316 65292 24182 22609 36896 20102 19968 20010 8220 22823 24573 24736 8221 30340 39575 23376 24418 35937 12290 29579 20924 24179 23548 28436 65292 25972 20307 32467 26500 38472 26087 65292 32570 20047 26032 24847 12290 13 10 50 48 48 50 24180 65306 12298 21334 36710 12299 65306 38472 38632 38706 23548 28436 65307 26412 23626 26202 20250 24635 20307 26469 35828 20047 21892 21487 38472 12290 20110 49 57 57 54 24180 21313 20998 30456 20284 65306 20856 22411 30340 24418 24335 22823 20110 20869 23481 12290 13 10 50 48 48 51 24180 65306 12298 35753 29233 20303 25105 23478 12299 65306 37329 36234 20316 21697 65307 26412 23626 26149 26202 22312 36213 23433 20107 20214 26333 20809 21518 31609 22791 65292 25972 20307 26469 35828 20196 20154 28385 24847 12290 13 10 50 48 48 52 24180 65306 12298 26395 26376 12299 12298 22825 19979 29238 27597 24515 12299 12290 34945 24503 26106 23548 28436 12290 36825 26159 22830 35270 33258 21150 26149 26202 30340 26368 21518 19968 23626 12290 24320 38376 21150 26149 26202 24050 25104 22823 21183 25152 36235 12290 13 10 50 48 48 53 24180 65306 12298 21315 25163 35266 38899 12299 58 30001 32843 21713 20154 28436 20986 30340 33310 36424 65292 24403 26102 24341 36215 20840 22269 36720 21160 12290 37070 26118 12289 38472 32500 20122 20316 21697 12290 26412 23626 26149 26202 20026 24320 38376 21150 26149 26202 30340 31532 19968 23626 65292 20063 26159 34987 26222 36941 35748 20026 36817 24180 26469 26368 25104 21151 30340 19968 23626 12290 13 10 50 48 48 54 24180 65306 12298 35828 20107 20799 12299 12289 12298 20431 22805 38451 12299 12289 12298 21513 31077 19977 23453 12299 12290 37070 26118 20316 21697 12290 13 10 50 48 48 55 24180 65306 20013 22269 26434 25216 22242 12298 20431 33457 26086 12299 38598 20307 31354 31481 12290 27494 26415 12298 34892 20113 27969 27700 12299 12290 37329 36234 23548 28436 12290 13 10 91 32534 36753 93 32 26126 26143 13 10 24456 22810 29616 22312 20154 20204 32819 29087 33021 35814 30340 26126 26143 37117 26159 36890 36807 26149 26202 34987 20154 20204 25152 35748 35782 30340 65292 20063 26377 24456 22810 26126 26143 19982 26149 33410 32852 27426 26202 20250 26377 30528 26497 28145 30340 32852 31995 32 23435 31062 33521 12289 36153 32724 12289 24429 20029 23195 12289 24352 26126 25935 12289 36213 26412 23665 12289 38886 21807 12289 36213 20029 33993 65288 24050 25925 65289 12289 36213 24544 31077 12289 20522 33805 12289 35613 26112 26441 40 23567 21486 22137 41 13 10 91 32534 36753 93 32 20105 35758 13 10 38543 30528 26149 26202 36880 28176 25104 20026 20154 20204 30633 30446 30340 28966 28857 65292 23545 26149 26202 30340 20105 35758 20063 36234 26469 36234 22810 65306 13 10 91 32534 36753 93 32 40657 24149 19982 33104 36133 13 10 26149 26202 34987 25351 36131 40657 24149 37325 37325 12290 35768 22810 28436 21592 20026 20102 22312 26149 26202 20142 30456 65292 19981 24471 19981 20184 20986 21508 31181 21508 26679 30340 20195 20215 12290 13 10 50 48 48 51 24180 65292 26366 32463 55 27425 21442 21152 25191 23548 26149 26202 30340 22830 35270 33879 21517 23548 28436 36213 23433 22240 21463 36159 32618 34987 21271 20140 24066 31532 19968 20013 32423 20154 27665 27861 38498 21028 22788 49 48 24180 26377 26399 24466 21009 65292 26356 26159 25226 26149 26202 30340 33104 36133 19982 40657 24149 25512 20837 20844 20247 30340 35270 32447 12290 13 10 91 32534 36753 93 32 33410 30446 19981 33021 28385 36275 20154 20204 30340 26399 26395 13 10 26089 26399 30340 26149 33410 32852 27426 26202 20250 65292 26159 24456 22810 22312 20839 22320 30340 20013 22283 20154 22312 38500 22805 22812 38500 20102 29123 25918 29190 31481 20043 22806 65292 21807 19968 30340 23089 20048 33410 30446 65292 34987 20154 20204 31216 20026 8220 31934 31070 24180 22812 39277 8221 12290 36817 24180 26469 65292 20154 20204 21487 36873 25321 30340 23089 20048 27963 21160 36234 26469 36234 22810 65292 26149 26202 30456 23545 36234 26469 36234 24179 28129 65292 32780 19988 28436 20986 20570 20316 12290 22240 27492 39281 21463 35807 30149 12290 13 10 21478 22806 65292 33410 30446 30340 20027 39064 26356 20542 21521 20110 21271 26041 20154 20204 30340 20256 32479 29983 27963 26041 24335 21644 23089 20048 26041 24335 12290 27604 22914 65306 33410 30446 24378 35843 20013 22269 20154 36807 24180 21507 39171 23376 65292 20294 26159 22312 21335 26041 22823 37096 20998 20154 36807 24180 19981 21507 39171 23376 65307 24456 22810 23567 21697 21095 24773 20197 21271 26041 26085 24120 29983 27963 20026 20027 65292 32780 21335 26041 ) asWordArray asTwoByteString! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:55'!englishText	"2500 characters, plain ASCII encoding"	"self new englishText"^#(85 110 105 99 111 100 101 32 105 115 32 97 110 32 105 110 100 117 115 116 114 121 32 115 116 97 110 100 97 114 100 32 100 101 115 105 103 110 101 100 32 116 111 32 97 108 108 111 119 32 116 101 120 116 32 97 110 100 32 115 121 109 98 111 108 115 32 102 114 111 109 32 97 108 108 32 111 102 32 116 104 101 32 119 114 105 116 105 110 103 32 115 121 115 116 101 109 115 32 111 102 32 116 104 101 32 119 111 114 108 100 32 116 111 32 98 101 32 99 111 110 115 105 115 116 101 110 116 108 121 32 114 101 112 114 101 115 101 110 116 101 100 32 97 110 100 32 109 97 110 105 112 117 108 97 116 101 100 32 98 121 32 99 111 109 112 117 116 101 114 115 46 32 68 101 118 101 108 111 112 101 100 32 105 110 32 116 97 110 100 101 109 32 119 105 116 104 32 116 104 101 32 85 110 105 118 101 114 115 97 108 32 67 104 97 114 97 99 116 101 114 32 83 101 116 32 115 116 97 110 100 97 114 100 32 97 110 100 32 112 117 98 108 105 115 104 101 100 32 105 110 32 98 111 111 107 32 102 111 114 109 32 97 115 32 84 104 101 32 85 110 105 99 111 100 101 32 83 116 97 110 100 97 114 100 44 32 85 110 105 99 111 100 101 32 99 111 110 115 105 115 116 115 32 111 102 32 97 32 99 104 97 114 97 99 116 101 114 32 114 101 112 101 114 116 111 105 114 101 44 32 97 110 32 101 110 99 111 100 105 110 103 32 109 101 116 104 111 100 111 108 111 103 121 32 97 110 100 32 115 101 116 32 111 102 32 115 116 97 110 100 97 114 100 32 99 104 97 114 97 99 116 101 114 32 101 110 99 111 100 105 110 103 115 44 32 97 32 115 101 116 32 111 102 32 99 111 100 101 32 99 104 97 114 116 115 32 102 111 114 32 118 105 115 117 97 108 32 114 101 102 101 114 101 110 99 101 44 32 97 110 32 101 110 117 109 101 114 97 116 105 111 110 32 111 102 32 99 104 97 114 97 99 116 101 114 32 112 114 111 112 101 114 116 105 101 115 32 115 117 99 104 32 97 115 32 117 112 112 101 114 32 97 110 100 32 108 111 119 101 114 32 99 97 115 101 44 32 97 32 115 101 116 32 111 102 32 114 101 102 101 114 101 110 99 101 32 100 97 116 97 32 99 111 109 112 117 116 101 114 32 102 105 108 101 115 44 32 97 110 100 32 114 117 108 101 115 32 102 111 114 32 110 111 114 109 97 108 105 122 97 116 105 111 110 44 32 100 101 99 111 109 112 111 115 105 116 105 111 110 44 32 99 111 108 108 97 116 105 111 110 32 97 110 100 32 114 101 110 100 101 114 105 110 103 46 13 10 84 104 101 32 85 110 105 99 111 100 101 32 67 111 110 115 111 114 116 105 117 109 44 32 116 104 101 32 110 111 110 45 112 114 111 102 105 116 32 111 114 103 97 110 105 122 97 116 105 111 110 32 116 104 97 116 32 99 111 111 114 100 105 110 97 116 101 115 32 85 110 105 99 111 100 101 39 115 32 100 101 118 101 108 111 112 109 101 110 116 44 32 104 97 115 32 116 104 101 32 97 109 98 105 116 105 111 117 115 32 103 111 97 108 32 111 102 32 101 118 101 110 116 117 97 108 108 121 32 114 101 112 108 97 99 105 110 103 32 101 120 105 115 116 105 110 103 32 99 104 97 114 97 99 116 101 114 32 101 110 99 111 100 105 110 103 32 115 99 104 101 109 101 115 32 119 105 116 104 32 85 110 105 99 111 100 101 32 97 110 100 32 105 116 115 32 115 116 97 110 100 97 114 100 32 85 110 105 99 111 100 101 32 84 114 97 110 115 102 111 114 109 97 116 105 111 110 32 70 111 114 109 97 116 32 40 85 84 70 41 32 115 99 104 101 109 101 115 44 32 97 115 32 109 97 110 121 32 111 102 32 116 104 101 32 101 120 105 115 116 105 110 103 32 115 99 104 101 109 101 115 32 97 114 101 32 108 105 109 105 116 101 100 32 105 110 32 115 105 122 101 32 97 110 100 32 115 99 111 112 101 32 97 110 100 32 97 114 101 32 105 110 99 111 109 112 97 116 105 98 108 101 32 119 105 116 104 32 109 117 108 116 105 108 105 110 103 117 97 108 32 101 110 118 105 114 111 110 109 101 110 116 115 46 32 85 110 105 99 111 100 101 39 115 32 115 117 99 99 101 115 115 32 97 116 32 117 110 105 102 121 105 110 103 32 99 104 97 114 97 99 116 101 114 32 115 101 116 115 32 104 97 115 32 108 101 100 32 116 111 32 105 116 115 32 119 105 100 101 115 112 114 101 97 100 32 97 110 100 32 112 114 101 100 111 109 105 110 97 110 116 32 117 115 101 32 105 110 32 116 104 101 32 105 110 116 101 114 110 97 116 105 111 110 97 108 105 122 97 116 105 111 110 32 97 110 100 32 108 111 99 97 108 105 122 97 116 105 111 110 32 111 102 32 99 111 109 112 117 116 101 114 32 115 111 102 116 119 97 114 101 46 32 84 104 101 32 115 116 97 110 100 97 114 100 32 104 97 115 32 98 101 101 110 32 105 109 112 108 101 109 101 110 116 101 100 32 105 110 32 109 97 110 121 32 114 101 99 101 110 116 32 116 101 99 104 110 111 108 111 103 105 101 115 44 32 105 110 99 108 117 100 105 110 103 32 88 77 76 44 32 116 104 101 32 74 97 118 97 32 112 114 111 103 114 97 109 109 105 110 103 32 108 97 110 103 117 97 103 101 32 97 110 100 32 109 111 100 101 114 110 32 111 112 101 114 97 116 105 110 103 32 115 121 115 116 101 109 115 46 13 10 79 114 105 103 105 110 32 97 110 100 32 100 101 118 101 108 111 112 109 101 110 116 13 10 85 110 105 99 111 100 101 32 104 97 115 32 116 104 101 32 101 120 112 108 105 99 105 116 32 97 105 109 32 111 102 32 116 114 97 110 115 99 101 110 100 105 110 103 32 116 104 101 32 108 105 109 105 116 97 116 105 111 110 115 32 111 102 32 116 114 97 100 105 116 105 111 110 97 108 32 99 104 97 114 97 99 116 101 114 32 101 110 99 111 100 105 110 103 115 44 32 115 117 99 104 32 97 115 32 116 104 111 115 101 32 100 101 102 105 110 101 100 32 98 121 32 116 104 101 32 73 83 79 32 56 56 53 57 32 115 116 97 110 100 97 114 100 32 119 104 105 99 104 32 102 105 110 100 32 119 105 100 101 32 117 115 97 103 101 32 105 110 32 118 97 114 105 111 117 115 32 99 111 117 110 116 114 105 101 115 32 111 102 32 116 104 101 32 119 111 114 108 100 32 98 117 116 32 114 101 109 97 105 110 32 108 97 114 103 101 108 121 32 105 110 99 111 109 112 97 116 105 98 108 101 32 119 105 116 104 32 101 97 99 104 32 111 116 104 101 114 46 32 77 97 110 121 32 116 114 97 100 105 116 105 111 110 97 108 32 99 104 97 114 97 99 116 101 114 32 101 110 99 111 100 105 110 103 115 32 115 104 97 114 101 32 97 32 99 111 109 109 111 110 32 112 114 111 98 108 101 109 32 105 110 32 116 104 97 116 32 116 104 101 121 32 97 108 108 111 119 32 98 105 108 105 110 103 117 97 108 32 99 111 109 112 117 116 101 114 32 112 114 111 99 101 115 115 105 110 103 32 40 117 115 117 97 108 108 121 32 117 115 105 110 103 32 82 111 109 97 110 32 99 104 97 114 97 99 116 101 114 115 32 97 110 100 32 116 104 101 32 108 111 99 97 108 32 108 97 110 103 117 97 103 101 41 32 98 117 116 32 110 111 116 32 109 117 108 116 105 108 105 110 103 117 97 108 32 99 111 109 112 117 116 101 114 32 112 114 111 99 101 115 115 105 110 103 32 40 99 111 109 112 117 116 101 114 32 112 114 111 99 101 115 115 105 110 103 32 111 102 32 97 114 98 105 116 114 97 114 121 32 108 97 110 103 117 97 103 101 115 32 109 105 120 101 100 32 119 105 116 104 32 101 97 99 104 32 111 116 104 101 114 41 46 13 10 85 110 105 99 111 100 101 44 32 105 110 32 105 110 116 101 110 116 44 32 101 110 99 111 100 101 115 32 116 104 101 32 117 110 100 101 114 108 121 105 110 103 32 99 104 97 114 97 99 116 101 114 115 32 103 114 97 112 104 101 109 101 115 32 97 110 100 32 103 114 97 112 104 101 109 101 45 108 105 107 101 32 117 110 105 116 115 32 114 97 116 104 101 114 32 116 104 97 110 32 116 104 101 32 118 97 114 105 97 110 116 32 103 108 121 112 104 115 32 40 114 101 110 100 101 114 105 110 103 115 41 32 102 111 114 32 115 117 99 104 32 99 104 97 114 97 99 116 101 114 115 46 32 73 110 32 116 104 101 32 99 97 115 101 32 111 102 32 67 104 105 110 101 115 101 32 99 104 97 114 97 99 116 101 114 115 44 32 116 104 105 115 32 115 111 109 101 116 105 109 101 115 32 108 101 97 100 115 32 116 111 32 99 111 110 116 114 111 118 101 114 115 105 101 115 32 111 118 101 114 32 100 105 115 116 105 110 103 117 105 115 104 105 110 103 32 116 104 101 32 117 110 100 101 114 108 121 105 110 103 32 99 104 97 114 97 99 116 101 114 32 102 114 111 109 32 105 116 115 32 118 97 114 105 97 110 116 32 103 108 121 112 104 115 32 40 115 101 101 32 72 97 110 32 117 110 105 102 105 99 97 116 105 111 110 41 46 13 10 73 110 32 116 101 120 116 32 112 114 111 99 101 115 115 105 110 103 44 32 85 110 105 99 111 100 101 32 116 97 107 101 115 32 116 104 101 32 114 111 108 101 32 111 102 32 112 114 111 118 105 100 105 110 103 32 97 32 117 110 105 113 117 101 32 99 111 100 101 32 112 111 105 110 116 32 97 32 110 117 109 98 101 114 44 32 110 111 116 32 97 32 103 108 121 112 104 32 102 111 114 32 101 97 99 104 32 99 104 97 114 97 99 116 101 114 46 32 73 110 32 111 116 104 101 114 32 119 111 114 100 115 44 32 85 110 105 99 111 100 101 32 114 101 112 114 101 115 101 110 116 115 32 97 32 99 104 97 114 97 99 116 101 114 32 105 110 32 97 110 32 97 98 115 116 114 97 99 116 32 119 97 121 32 97 110 100 32 108 101 97 118 101 115 32 116 104 101 32 118 105 115 117 97 108 32 114 101 110 100 101 114 105 110 103 32 40 115 105 122 101 44 32 115 104 97 112 101 44 32 102 111 110 116 32 111 114 32 115 116 121 108 101 41 32 116 111 32 111 116 104 101 114 32 115 111 102 116 119 97 114 101 44 32 115 117 99 104 32 97 115 32 97 32 119 101 98 32 98 114 111 119 115 101 114 32 111 114 32 119 111 114 100 32 112 114 111 99 101 115 115 111 114 46 32 84 104 105 115 32 115 105 109 112 108 101 32 97 105 109 32 98 101 99 111 109 101 115 32 99 111 109 112 108 105 99 97 116 101 100 44 32 104 111 119 101 118 101 114 44 32 98 121 ) asByteArray asString! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:55'!frenchText	"2500 characters, Latin1 encoding"	"self new frenchText"^#(83 233 103 111 108 232 110 101 32 82 111 121 97 108 32 97 32 105 110 100 105 113 117 233 44 32 108 117 110 100 105 32 49 49 32 106 117 105 110 32 101 110 32 109 105 108 105 101 117 32 100 101 32 106 111 117 114 110 233 101 44 32 108 111 114 115 32 100 39 117 110 32 100 233 112 108 97 99 101 109 101 110 116 32 100 97 110 115 32 108 101 32 49 52 101 32 97 114 114 111 110 100 105 115 115 101 109 101 110 116 32 100 101 32 80 97 114 105 115 44 32 97 118 111 105 114 32 116 233 108 233 112 104 111 110 233 32 100 97 110 115 32 108 97 32 109 97 116 105 110 233 101 32 224 32 70 114 97 110 231 111 105 115 32 66 97 121 114 111 117 32 101 116 32 108 117 105 32 97 118 111 105 114 32 108 97 105 115 115 233 32 117 110 32 109 101 115 115 97 103 101 32 97 102 105 110 32 100 101 32 100 105 115 99 117 116 101 114 32 100 117 32 115 101 99 111 110 100 32 116 111 117 114 32 100 101 115 32 108 233 103 105 115 108 97 116 105 118 101 115 46 32 77 109 101 32 82 111 121 97 108 32 97 32 97 106 111 117 116 233 44 32 100 101 118 97 110 116 32 108 97 32 112 114 101 115 115 101 44 32 113 117 39 101 108 108 101 32 34 97 116 116 101 110 100 97 105 116 32 117 110 101 32 114 233 112 111 110 115 101 34 32 100 117 32 108 101 97 100 101 114 32 100 117 32 77 111 117 118 101 109 101 110 116 32 100 233 109 111 99 114 97 116 101 32 40 77 111 68 101 109 41 46 13 10 34 78 111 117 115 32 100 101 118 111 110 115 32 106 111 105 110 100 114 101 32 110 111 115 32 102 111 114 99 101 115 44 32 105 108 32 102 97 117 116 32 116 114 97 118 97 105 108 108 101 114 32 97 117 32 99 97 115 32 112 97 114 32 99 97 115 34 44 32 97 45 116 45 101 108 108 101 32 100 105 116 46 32 85 110 32 112 101 117 32 112 108 117 115 32 116 244 116 44 32 105 110 118 105 116 233 101 32 100 101 32 82 84 76 44 32 108 39 97 110 99 105 101 110 110 101 32 99 97 110 100 105 100 97 116 101 32 100 117 32 80 83 32 224 32 108 97 32 112 114 233 115 105 100 101 110 116 105 101 108 108 101 32 97 118 97 105 116 32 97 110 110 111 110 99 233 32 115 111 110 32 105 110 116 101 110 116 105 111 110 32 100 101 32 34 112 114 101 110 100 114 101 32 99 111 110 116 97 99 116 34 32 97 118 101 99 32 70 114 97 110 231 111 105 115 32 66 97 121 114 111 117 44 32 97 118 97 110 116 32 108 101 32 115 101 99 111 110 100 32 116 111 117 114 32 100 101 115 32 108 233 103 105 115 108 97 116 105 118 101 115 46 32 69 108 108 101 32 97 32 233 103 97 108 101 109 101 110 116 32 97 112 112 101 108 233 32 108 101 115 32 233 108 101 99 116 101 117 114 115 32 100 117 32 77 111 68 101 109 32 224 32 114 101 112 111 114 116 101 114 32 108 101 117 114 115 32 118 111 105 120 32 115 117 114 32 108 101 115 32 99 97 110 100 105 100 97 116 115 32 100 117 32 80 97 114 116 105 32 115 111 99 105 97 108 105 115 116 101 44 32 108 101 32 49 55 32 106 117 105 110 46 13 10 34 65 32 112 97 114 116 105 114 32 100 117 32 109 111 109 101 110 116 32 111 249 32 108 39 101 110 106 101 117 32 100 101 32 99 101 115 32 233 108 101 99 116 105 111 110 115 32 108 233 103 105 115 108 97 116 105 118 101 115 44 32 99 39 101 115 116 32 100 39 101 109 112 234 99 104 101 114 32 108 97 32 99 111 110 99 101 110 116 114 97 116 105 111 110 32 101 120 99 101 115 115 105 118 101 32 100 101 115 32 112 111 117 118 111 105 114 115 32 101 110 116 114 101 32 108 101 115 32 109 97 105 110 115 32 100 117 32 109 234 109 101 32 112 97 114 116 105 44 32 99 101 32 113 117 101 32 70 114 97 110 231 111 105 115 32 66 97 121 114 111 117 32 97 32 115 111 117 108 105 103 110 233 32 104 105 101 114 32 40 46 46 46 41 44 32 105 108 32 101 115 116 32 233 118 105 100 101 110 116 32 113 117 101 32 108 101 115 32 233 108 101 99 116 101 117 114 115 32 100 117 32 77 111 68 101 109 32 100 111 105 118 101 110 116 32 114 101 106 111 105 110 100 114 101 32 108 101 115 32 99 97 110 100 105 100 97 116 115 32 100 117 32 80 83 34 44 32 97 32 101 120 112 108 105 113 117 233 32 108 39 101 120 45 99 97 110 100 105 100 97 116 101 32 224 32 108 39 233 108 101 99 116 105 111 110 32 112 114 233 115 105 100 101 110 116 105 101 108 108 101 44 32 113 117 105 32 97 32 233 103 97 108 101 109 101 110 116 32 114 97 112 112 101 108 233 32 113 117 39 101 108 108 101 32 112 97 114 116 97 103 101 97 105 116 32 97 118 101 99 32 70 114 97 110 231 111 105 115 32 66 97 121 114 111 117 32 34 117 110 32 99 101 114 116 97 105 110 32 110 111 109 98 114 101 32 100 101 32 118 97 108 101 117 114 115 34 32 99 111 109 109 101 32 108 97 32 108 117 116 116 101 32 99 111 110 116 114 101 32 108 97 32 100 101 116 116 101 32 101 116 32 108 97 32 100 233 102 101 110 115 101 32 100 101 32 108 39 105 109 112 97 114 116 105 97 108 105 116 233 32 100 101 32 108 39 69 116 97 116 46 13 10 76 101 32 49 48 32 106 117 105 110 44 32 108 101 32 108 101 97 100 101 114 32 99 101 110 116 114 105 115 116 101 44 32 100 111 110 116 32 108 101 32 112 97 114 116 105 32 97 32 114 101 99 117 101 105 108 108 105 32 55 44 54 49 32 37 32 100 101 115 32 118 111 105 120 32 101 116 32 112 101 117 116 32 101 115 112 233 114 101 114 32 113 117 97 116 114 101 32 115 105 232 103 101 115 32 97 117 32 109 105 101 117 120 44 32 97 118 97 105 116 32 97 110 110 111 110 99 233 32 113 117 101 32 108 101 32 77 111 68 101 109 32 101 120 97 109 105 110 101 114 97 105 116 32 34 97 117 32 99 97 108 109 101 32 101 116 32 97 117 32 99 97 115 32 112 97 114 32 99 97 115 34 32 108 97 32 115 105 116 117 97 116 105 111 110 32 97 118 97 110 116 32 100 101 32 100 233 99 105 100 101 114 32 100 39 233 118 101 110 116 117 101 108 115 32 100 233 115 105 115 116 101 109 101 110 116 115 32 112 111 117 114 32 108 101 32 115 101 99 111 110 100 32 116 111 117 114 32 100 101 115 32 108 233 103 105 115 108 97 116 105 118 101 115 46 32 80 111 117 114 32 97 117 116 97 110 116 44 32 105 108 32 97 118 97 105 116 32 233 103 97 108 101 109 101 110 116 32 115 111 117 108 105 103 110 233 32 113 117 101 32 115 97 32 34 100 233 109 97 114 99 104 101 32 233 116 97 105 116 32 97 117 116 104 101 110 116 105 113 117 101 109 101 110 116 32 105 110 100 233 112 101 110 100 97 110 116 101 34 46 13 10 78 69 32 80 65 83 32 70 65 73 82 69 32 34 66 65 82 82 65 71 69 34 13 10 65 108 108 97 110 116 32 100 97 110 115 32 108 101 32 109 234 109 101 32 115 101 110 115 44 32 70 114 97 110 231 111 105 115 32 72 111 108 108 97 110 100 101 32 97 32 101 110 115 117 105 116 101 32 97 112 112 101 108 233 44 32 108 117 110 100 105 32 109 97 116 105 110 32 115 117 114 32 70 114 97 110 99 101 45 73 110 116 101 114 44 32 108 39 233 108 101 99 116 111 114 97 116 32 115 111 99 105 97 108 105 115 116 101 32 224 32 118 111 116 101 114 32 99 111 110 116 114 101 32 108 39 85 77 80 44 32 121 32 99 111 109 112 114 105 115 32 101 110 32 118 111 116 97 110 116 32 112 111 117 114 32 108 101 32 77 111 68 101 109 44 32 115 105 32 108 101 32 99 97 110 100 105 100 97 116 32 100 117 32 80 83 32 110 39 101 115 116 32 112 97 115 32 97 117 32 115 101 99 111 110 100 32 116 111 117 114 46 32 73 108 32 97 32 114 233 99 105 112 114 111 113 117 101 109 101 110 116 32 97 112 112 101 108 233 32 108 101 115 32 233 108 101 99 116 101 117 114 115 32 100 101 32 70 114 97 110 231 111 105 115 32 66 97 121 114 111 117 32 224 32 115 111 117 116 101 110 105 114 32 108 101 115 32 99 97 110 100 105 100 97 116 117 114 101 115 32 100 101 32 103 97 117 99 104 101 32 97 117 32 100 101 117 120 105 232 109 101 32 116 111 117 114 32 100 117 32 115 99 114 117 116 105 110 32 108 233 103 105 115 108 97 116 105 102 46 13 10 76 101 32 112 111 114 116 101 45 112 97 114 111 108 101 32 100 117 32 80 83 44 32 74 117 108 105 101 110 32 68 114 97 121 32 97 44 32 108 117 105 44 32 97 115 115 117 114 233 32 113 117 101 32 115 111 110 32 112 97 114 116 105 32 110 101 32 102 101 114 97 105 116 32 112 97 115 32 34 98 97 114 114 97 103 101 34 32 97 117 120 32 99 97 110 100 105 100 97 116 115 32 100 117 32 77 111 68 101 109 32 100 97 110 115 32 99 101 114 116 97 105 110 101 115 32 99 105 114 99 111 110 115 99 114 105 112 116 105 111 110 115 32 97 117 32 115 101 99 111 110 100 32 116 111 117 114 44 32 97 102 105 110 32 100 101 32 34 99 114 233 101 114 32 116 111 117 116 101 115 32 108 101 115 32 99 111 110 100 105 116 105 111 110 115 32 100 39 117 110 32 80 97 114 108 101 109 101 110 116 32 112 108 117 114 97 108 105 115 116 101 34 46 13 10 73 110 116 101 114 114 111 103 233 32 112 97 114 32 108 39 65 70 80 32 112 101 110 100 97 110 116 32 108 97 32 109 97 116 105 110 233 101 44 32 108 101 32 77 111 68 101 109 32 97 118 97 105 116 32 114 233 97 103 105 32 101 110 32 97 102 102 105 114 109 97 110 116 32 113 117 39 105 108 32 110 39 97 118 97 105 116 32 101 117 32 34 97 117 99 117 110 32 99 111 110 116 97 99 116 34 32 97 118 101 99 32 108 101 32 80 83 32 101 116 32 114 233 97 102 102 105 114 109 233 32 115 97 32 118 111 108 111 110 116 233 32 100 39 34 101 120 97 109 105 110 101 114 34 32 108 97 32 115 105 116 117 97 116 105 111 110 32 112 111 108 105 116 105 113 117 101 32 105 115 115 117 101 32 100 117 32 112 114 101 109 105 101 114 32 116 111 117 114 32 100 101 115 32 108 233 103 105 115 108 97 116 105 118 101 115 46 32 83 117 114 32 108 97 32 112 114 111 112 111 115 105 116 105 111 110 32 100 101 32 83 233 103 111 108 232 110 101 32 82 111 121 97 108 32 100 101 32 112 ) asByteArray asString! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:01'!percentNonASCII: aString	"percentage of characters whch are non ASCII"	"(self new percentNonASCII: self new frenchText) 3.2s1  "	"(self new percentNonASCII: self new slovenianText) 2.0s1 "	"(self new percentNonASCII: self new russianText) 83.2s1 "	"(self new percentNonASCII: self new chineseText) 89.4s1 "	| nonAsciiCount |	nonAsciiCount := (aString select: [:char | char asInteger > 127]) size.	^((nonAsciiCount / aString size) * 100) asScaledDecimal:1! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:55'!russianText	"2500 characters, Unicode Cyrillic encoding"	"self new russianText"^#(1042 32 1043 1077 1088 1084 1072 1085 1080 1080 32 1079 1072 1074 1077 1088 1096 1080 1083 1072 1089 1100 32 1086 1095 1077 1088 1077 1076 1085 1072 1103 32 1074 1089 1090 1088 1077 1095 1072 32 171 1073 1086 1083 1100 1096 1086 1081 32 1074 1086 1089 1100 1084 1105 1088 1082 1080 187 46 32 1042 1086 1087 1088 1077 1082 1080 32 1087 1077 1088 1074 1086 1085 1072 1095 1072 1083 1100 1085 1086 1081 32 1087 1086 1074 1077 1089 1090 1082 1077 32 1092 1086 1088 1091 1084 1072 44 32 1085 1072 32 1087 1077 1088 1074 1086 1084 32 1087 1083 1072 1085 1077 32 1086 1082 1072 1079 1072 1083 1080 1089 1100 32 1088 1072 1079 1085 1086 1075 1083 1072 1089 1080 1103 32 1084 1077 1078 1076 1091 32 1056 1086 1089 1089 1080 1077 1081 32 1080 32 1086 1089 1090 1072 1083 1100 1085 1099 1084 1080 32 1091 1095 1072 1089 1090 1085 1080 1082 1072 1084 1080 32 1074 1089 1090 1088 1077 1095 1080 46 32 1055 1088 1080 32 1101 1090 1086 1084 32 1076 1072 1078 1077 32 1085 1077 1076 1086 1073 1088 1086 1078 1077 1083 1072 1090 1077 1083 1080 32 1056 1086 1089 1089 1080 1080 32 1087 1088 1080 1079 1085 1072 1083 1080 44 32 1095 1090 1086 32 1075 1083 1072 1074 1085 1099 1084 32 1090 1088 1080 1091 1084 1092 1072 1090 1086 1088 1086 1084 32 71 56 32 1089 1090 1072 1083 13 10 1042 32 1082 1072 1082 1086 1081 32 1074 1072 1083 1102 1090 1077 32 1093 1088 1072 1085 1080 1090 1100 32 1089 1073 1077 1088 1077 1078 1077 1085 1080 1103 58 32 1089 1086 1074 1077 1090 1099 32 1101 1082 1089 1087 1077 1088 1090 1086 1074 13 10 1060 1054 1058 1054 32 1055 1088 1072 1074 1076 1072 46 1088 1091 58 13 10 1042 1083 1072 1076 1080 1084 1080 1088 32 1055 1091 1090 1080 1085 44 32 1072 32 1075 1083 1072 1074 1085 1099 1084 32 1085 1077 1091 1076 1072 1095 1085 1080 1082 1086 1084 32 1087 1088 1077 1079 1080 1076 1077 1085 1090 32 1057 1064 1040 32 1044 1078 1086 1088 1076 1078 32 1041 1091 1096 46 13 10 1050 1072 1085 1094 1083 1077 1088 32 1043 1077 1088 1084 1072 1085 1080 1080 32 1040 1085 1075 1077 1083 1072 32 1052 1077 1088 1082 1077 1083 1100 32 1087 1083 1072 1085 1080 1088 1086 1074 1072 1083 1072 32 1074 1099 1085 1077 1089 1090 1080 32 1074 32 1094 1077 1085 1090 1088 32 1074 1085 1080 1084 1072 1085 1080 1103 32 1076 1074 1077 32 1090 1077 1084 1099 32 32 1073 1086 1088 1100 1073 1091 32 1089 32 1075 1083 1086 1073 1072 1083 1100 1085 1099 1084 32 1087 1086 1090 1077 1087 1083 1077 1085 1080 1077 1084 32 1080 32 1073 1077 1076 1085 1086 1089 1090 1100 1102 46 32 1044 1086 32 1085 1077 1082 1086 1090 1086 1088 1086 1081 32 1089 1090 1077 1087 1077 1085 1080 32 1101 1090 1086 32 1091 1076 1072 1083 1086 1089 1100 44 32 1087 1086 1089 1082 1086 1083 1100 1082 1091 32 171 1074 1086 1089 1100 1084 1105 1088 1082 1072 187 32 1087 1088 1080 1085 1103 1083 1072 32 1079 1072 1103 1074 1083 1077 1085 1080 1077 32 1086 32 1085 1077 1086 1073 1093 1086 1076 1080 1084 1086 1089 1090 1080 32 1087 1088 1080 1085 1103 1090 1100 32 1089 1088 1086 1095 1085 1099 1077 32 1084 1077 1088 1099 32 1076 1083 1103 32 1086 1089 1090 1072 1085 1086 1074 1082 1080 32 1087 1086 1090 1077 1087 1083 1077 1085 1080 1103 32 1082 1083 1080 1084 1072 1090 1072 32 1080 32 1086 32 1074 1099 1076 1077 1083 1077 1085 1080 1080 32 1073 1077 1076 1085 1077 1081 1096 1080 1084 32 1089 1090 1088 1072 1085 1072 1084 32 1040 1092 1088 1080 1082 1080 32 54 48 32 1084 1080 1083 1083 1080 1072 1088 1076 1086 1074 32 1076 1086 1083 1083 1072 1088 1086 1074 32 1085 1072 32 1073 1086 1088 1100 1073 1091 32 1089 1086 32 1057 1055 1048 1044 1086 1084 32 1080 32 1076 1088 1091 1075 1080 1084 1080 32 1080 1085 1092 1077 1082 1094 1080 1103 1084 1080 46 32 1050 1088 1086 1084 1077 32 1090 1086 1075 1086 44 32 171 1074 1086 1089 1100 1084 1105 1088 1082 1072 187 32 1087 1088 1080 1075 1088 1086 1079 1080 1083 1072 32 1091 1078 1077 1089 1090 1086 1095 1077 1085 1080 1077 1084 32 1089 1072 1085 1082 1094 1080 1081 32 1087 1088 1086 1090 1080 1074 32 1048 1088 1072 1085 1072 32 1080 32 1050 1053 1044 1056 32 1074 32 1090 1086 1084 32 1089 1083 1091 1095 1072 1077 44 32 1077 1089 1083 1080 32 1086 1085 1080 32 1085 1077 32 1086 1090 1082 1072 1078 1091 1090 1089 1103 32 1086 1090 32 1089 1074 1086 1077 1081 32 1103 1076 1077 1088 1085 1086 1081 32 1087 1088 1086 1075 1088 1072 1084 1084 1099 46 13 10 1054 1076 1085 1072 1082 1086 32 1101 1090 1080 44 32 1073 1077 1079 1091 1089 1083 1086 1074 1085 1086 44 32 1074 1072 1078 1085 1099 1077 32 1090 1077 1084 1099 32 1086 1082 1072 1079 1072 1083 1080 1089 1100 32 1086 1090 1086 1076 1074 1080 1085 1091 1090 1099 32 1085 1072 32 1074 1090 1086 1088 1086 1081 32 1087 1083 1072 1085 32 1088 1072 1079 1085 1086 1075 1083 1072 1089 1080 1103 1084 1080 32 1084 1077 1078 1076 1091 32 1047 1072 1087 1072 1076 1086 1084 32 1080 32 1056 1086 1089 1089 1080 1077 1081 46 32 1057 32 1073 1086 1083 1100 1096 1080 1084 32 1080 1085 1090 1077 1088 1077 1089 1086 1084 32 1074 1089 1077 32 1078 1076 1072 1083 1080 32 1074 1089 1090 1088 1077 1095 1080 32 1055 1091 1090 1080 1085 1072 32 1089 32 1087 1088 1077 1084 1100 1077 1088 45 1084 1080 1085 1080 1089 1090 1088 1086 1084 32 1042 1077 1083 1080 1082 1086 1073 1088 1080 1090 1072 1085 1080 1080 32 1058 1086 1085 1080 32 1041 1083 1101 1088 1086 1084 46 32 1055 1077 1088 1077 1076 32 1077 1105 32 1085 1072 1095 1072 1083 1086 1084 32 1091 1093 1086 1076 1103 1097 1080 1081 32 1073 1088 1080 1090 1072 1085 1089 1082 1080 1081 32 1087 1088 1077 1084 1100 1077 1088 32 1087 1086 1087 1088 1086 1089 1080 1083 32 1078 1091 1088 1085 1072 1083 1080 1089 1090 1086 1074 32 1091 1076 1072 1083 1080 1090 1100 1089 1103 44 32 1072 32 1087 1086 1089 1083 1077 32 1077 1105 32 1086 1082 1086 1085 1095 1072 1085 1080 1103 32 1084 1085 1086 1075 1086 1079 1085 1072 1095 1080 1090 1077 1083 1100 1085 1086 32 1089 1082 1072 1079 1072 1083 44 32 1095 1090 1086 32 171 1083 32 1102 1076 1080 32 1089 1077 1075 1086 1076 1085 1103 32 1086 1087 1072 1089 1072 1102 1090 1089 1103 32 1080 32 1073 1086 1103 1090 1089 1103 32 1056 1086 1089 1089 1080 1080 187 46 32 1042 32 1095 1105 1084 32 1089 1086 1089 1090 1086 1103 1090 32 1086 1087 1072 1089 1077 1085 1080 1103 44 32 1041 1083 1101 1088 32 1085 1077 32 1091 1090 1086 1095 1085 1080 1083 46 32 1042 1086 1079 1084 1086 1078 1085 1086 44 32 1055 1091 1090 1080 1085 32 1086 1090 1082 1072 1079 1072 1083 32 1077 1084 1091 32 1074 32 1074 1099 1076 1072 1095 1077 32 1086 1073 1074 1080 1085 1103 1077 1084 1086 1075 1086 32 1074 32 1091 1073 1080 1081 1089 1090 1074 1077 32 1040 1083 1077 1082 1089 1072 1085 1076 1088 1072 32 1051 1080 1090 1074 1080 1085 1077 1085 1082 1086 32 1040 1085 1076 1088 1077 1103 32 1051 1091 1075 1086 1074 1086 1075 1086 32 1080 32 1086 1090 1082 1072 1079 1072 1083 1089 1103 32 1076 1072 1090 1100 32 1075 1072 1088 1072 1085 1090 1080 1080 44 32 1095 1090 1086 32 1073 1088 1080 1090 1072 1085 1089 1082 1080 1077 32 1085 1077 1092 1090 1103 1085 1099 1077 32 1082 1086 1084 1087 1072 1085 1080 1080 32 1087 1088 1086 1076 1086 1083 1078 1072 1090 1100 32 1074 1086 1083 1100 1075 1086 1090 1085 1086 32 1095 1091 1074 1089 1090 1074 1086 1074 1072 1090 1100 32 1089 1077 1073 1103 32 1074 32 1056 1086 1089 1089 1080 1080 46 32 1063 1090 1086 32 1080 32 1074 1099 1085 1091 1076 1080 1083 1086 32 1041 1083 1101 1088 1072 32 1075 1086 1074 1086 1088 1080 1090 1100 32 1089 1090 1086 1083 1100 32 1088 1077 1079 1082 1086 46 13 10 1063 1080 1090 1072 1081 1090 1077 32 1087 1086 32 1090 1077 1084 1077 58 32 1055 1091 1090 1080 1085 32 1093 1086 1095 1077 1090 32 1074 1079 1103 1090 1100 32 1041 1091 1096 1072 32 1074 32 34 1043 1072 1073 1072 1083 1091 34 46 13 10 1050 1091 1076 1072 32 1084 1077 1085 1100 1096 1080 1081 32 1080 1085 1090 1077 1088 1077 1089 32 1074 1099 1079 1074 1072 1083 1080 32 1087 1077 1088 1077 1075 1086 1074 1086 1088 1099 32 1055 1091 1090 1080 1085 1072 32 1089 32 1087 1088 1077 1084 1100 1077 1088 45 1084 1080 1085 1080 1089 1090 1088 1086 1084 32 1071 1087 1086 1085 1080 1080 32 1057 1080 1085 1076 1079 1086 32 1040 1073 1101 46 32 1071 1087 1086 1085 1089 1082 1072 1103 32 1089 1090 1086 1088 1086 1085 1072 32 1074 32 1086 1095 1077 1088 1077 1076 1085 1086 1081 32 1088 1072 1079 32 1087 1086 1078 1072 1083 1086 1074 1072 1083 1072 1089 1100 44 32 1095 1090 1086 32 1056 1086 1089 1089 1080 1103 32 1085 1077 32 1089 1083 1091 1096 1072 1077 1090 32 1077 1105 32 1076 1086 1074 1086 1076 1099 32 1087 1086 32 1087 1086 1074 1086 1076 1091 32 1070 1078 1085 1099 1093 32 1050 1091 1088 1080 1083 46 32 1042 1086 1087 1088 1077 1082 1080 32 1086 1078 1080 1076 1072 1085 1080 1103 1084 44 32 1085 1080 1095 1077 1075 1086 32 1089 1090 1088 1072 1096 1085 1086 1075 1086 32 1085 1077 32 1087 1088 1086 1080 1079 1086 1096 1083 1086 32 1085 1072 32 1087 1077 1088 1077 1075 1086 1074 1086 1088 1072 1093 32 1088 1086 1089 1089 1080 1081 1089 1082 1086 1075 1086 32 1087 1088 1077 1079 1080 1076 1077 1085 1090 1072 32 1089 32 1085 1086 1074 1099 1084 32 1075 1083 1072 1074 1086 1081 32 1060 1088 1072 1085 1094 1080 1080 32 1053 1080 1082 1086 1083 1103 32 1057 1072 1088 1082 1086 1079 1080 44 32 1082 1086 1090 1086 1088 1099 1081 32 1088 1072 1085 1077 1077 32 1087 1086 1079 1074 1086 1083 1103 1083 32 1089 1077 1073 1077 32 1088 1077 1079 1082 1080 1077 32 1074 1099 1087 1072 1076 1099 32 1074 32 1072 1076 1088 1077 1089 32 1056 1086 1089 1089 1080 1080 46 32 1042 1085 1077 1096 1085 1077 32 1089 1087 1086 1082 1086 1081 1085 1086 32 1087 1088 1086 1096 1083 1080 32 1080 32 1087 1077 1088 1077 1075 1086 1074 1086 1088 1099 32 1089 32 1052 1077 1088 1082 1077 1083 1100 44 32 1072 32 1090 1072 1082 1078 1077 32 1089 32 1087 1088 1077 1084 1100 1077 1088 45 1084 1080 1085 1080 1089 1090 1088 1072 1084 1080 32 1048 1090 1072 1083 1080 1080 32 1080 32 1050 1072 1085 1072 1076 1099 32 1056 1086 1084 1072 1085 1086 32 1055 1088 1086 1076 1080 32 1080 32 1057 1090 1080 1074 1077 1085 1086 1084 32 1061 1072 1088 1087 1077 1088 1086 1084 44 32 1095 1090 1086 32 1090 1072 1082 1078 1077 32 1084 1086 1078 1085 1086 32 1079 1072 1085 1077 1089 1090 1080 32 1074 32 1072 1082 1090 1080 1074 32 1075 1083 1072 1074 1099 32 1088 1086 1089 1089 1080 1081 1089 1082 1086 1075 1086 32 1075 1086 1089 1091 1076 1072 1088 1089 1090 1074 1072 46 13 10 1042 1087 1088 1086 1095 1077 1084 44 32 1086 1076 1085 1072 32 1090 1077 1084 1072 32 1074 1089 1105 45 1090 1072 1082 1080 32 1074 1073 1080 1083 1072 32 1082 1083 1080 1085 32 1084 1077 1078 1076 1091 32 1055 1091 1090 1080 1085 1099 1084 44 32 1089 32 1086 1076 1085 1086 1081 32 1089 1090 1086 1088 1086 1085 1099 44 32 1080 32 1052 1077 1088 1082 1077 1083 1100 32 1080 32 1057 1072 1088 1082 1086 1079 1080 44 32 1089 32 1076 1088 1091 1075 1086 1081 46 32 1056 1077 1095 1100 32 1080 1076 1105 1090 32 1086 32 1050 1086 1089 1086 1074 1086 44 32 1075 1076 1077 32 1089 1090 1086 1088 1086 1085 1099 32 1085 1080 32 1085 1072 32 1081 1086 1090 1091 32 1085 1077 32 1086 1090 1086 1096 1083 1080 32 1086 1090 32 1089 1074 1086 1080 1093 32 1087 1088 1077 1078 1085 1080 1093 32 1087 1086 1079 1080 1094 1080 1081 46 32 1050 1072 1085 1094 1083 1077 1088 32 1043 1077 1088 1084 1072 1085 1080 1080 32 1080 32 1087 1088 1077 1079 1080 1076 1077 1085 1090 32 1060 1088 1072 1085 1094 1080 1080 32 1087 1088 1080 1079 1085 1072 1083 1080 44 32 1095 1090 1086 32 1080 1084 32 1085 1077 32 1091 1076 1072 1083 1086 1089 1100 32 1091 1073 1077 1076 1080 1090 1100 32 1088 1086 1089 1089 1080 1081 1089 1082 1086 1075 1086 32 1083 1080 1076 1077 1088 1072 32 1087 1088 1080 1079 1085 1072 1090 1100 13 10 1042 32 1072 1088 1084 1080 1102 32 1073 1091 1076 1091 1090 32 1087 1088 1080 1079 1099 1074 ) asWordArray asTwoByteString! !!UnicodeBenchmarking methodsFor: 'example texts' stamp: 'mivsek 6/12/2007 14:55'!slovenianText	"2500 characters, Unicode Latin2 encoding"	"self new slovenianText"^#(32 68 114 46 32 381 105 103 97 32 84 117 114 107 44 32 109 105 110 105 115 116 101 114 32 98 114 101 122 32 112 111 114 116 102 101 108 106 97 44 32 106 101 32 118 32 116 101 109 32 116 114 101 110 117 116 107 117 32 110 97 106 98 114 382 32 110 97 106 98 111 108 106 32 122 97 115 101 100 101 110 32 105 110 32 112 114 105 108 106 117 98 108 106 101 110 32 103 111 118 111 114 110 105 107 32 118 32 83 108 111 118 101 110 105 106 105 46 32 75 111 32 116 111 32 98 101 114 101 116 101 44 32 109 111 114 100 97 32 114 97 118 110 111 32 110 97 103 111 118 97 114 106 97 32 117 100 101 108 101 382 101 110 99 101 32 66 108 111 103 114 101 115 97 44 32 49 46 32 109 101 100 110 97 114 111 100 110 101 103 97 32 98 108 111 103 101 114 115 107 101 103 97 32 107 111 110 103 114 101 115 97 44 32 107 105 32 112 114 101 100 32 109 110 111 382 105 99 111 32 50 53 48 32 108 106 117 100 105 32 112 111 116 101 107 97 32 116 111 32 115 111 98 111 116 111 32 118 32 67 97 110 107 97 114 106 101 118 101 109 32 100 111 109 117 46 13 10 381 101 32 118 32 116 111 114 101 107 32 112 97 32 106 101 32 110 97 103 111 118 111 114 105 108 32 45 32 105 110 32 115 105 99 101 114 32 122 32 118 105 100 101 111 32 112 111 115 110 101 116 107 97 44 32 107 101 114 32 106 101 32 98 105 108 32 110 101 112 114 101 100 118 105 100 101 110 111 32 122 97 100 114 382 97 110 32 45 32 122 97 108 111 382 110 105 107 101 44 32 107 105 32 115 111 32 115 101 32 122 98 114 97 108 105 32 118 32 80 111 114 116 111 114 111 382 117 32 110 97 32 53 46 32 107 111 110 103 114 101 115 117 32 75 110 106 105 103 97 32 110 97 32 83 108 111 118 101 110 115 107 101 109 46 32 75 111 116 32 112 114 101 100 97 118 97 116 101 108 106 32 115 101 109 32 115 101 32 97 107 116 105 118 110 111 32 117 100 101 108 101 382 105 108 32 111 122 105 114 111 109 97 32 115 101 32 117 100 101 108 101 382 117 106 101 109 32 111 98 101 104 32 107 111 110 103 114 101 115 111 118 32 116 117 100 105 32 115 97 109 44 32 122 97 116 111 32 112 114 105 98 108 105 382 110 111 32 118 101 109 44 32 122 97 32 107 97 106 32 103 114 101 32 112 114 105 32 101 110 105 32 105 110 32 100 114 117 103 105 32 115 116 118 97 114 105 46 32 84 111 100 97 32 112 117 115 116 105 109 111 32 98 108 111 103 101 32 122 97 32 107 100 97 106 32 100 114 117 103 105 269 32 105 110 32 115 101 32 112 111 115 118 101 116 105 109 111 32 107 110 106 105 103 97 109 46 13 10 90 97 108 111 382 110 105 107 105 32 115 111 32 109 101 100 32 100 114 117 103 105 109 32 114 97 122 112 114 97 118 108 106 97 108 105 32 116 117 100 105 32 110 97 32 116 101 109 111 32 100 105 103 105 116 97 108 105 122 97 99 105 106 101 32 107 110 106 105 103 32 105 110 32 115 101 32 115 112 114 97 353 101 118 97 108 105 44 32 97 108 105 32 106 101 32 116 111 32 122 97 110 106 101 32 103 114 111 382 110 106 97 32 97 108 105 32 112 111 115 108 111 118 110 97 32 112 114 105 108 111 382 110 111 115 116 46 32 86 112 114 97 353 97 110 106 101 32 106 101 32 115 101 118 101 100 97 32 114 101 116 111 114 105 269 110 111 32 110 97 32 111 98 101 104 32 115 116 114 97 110 101 104 58 32 115 101 118 101 100 97 32 106 101 32 103 114 111 382 110 106 97 32 105 110 32 115 101 118 101 100 97 32 106 101 32 112 114 105 108 111 382 110 111 115 116 46 13 10 78 97 32 107 111 110 103 114 101 115 32 115 111 32 112 111 118 97 98 105 108 105 32 116 117 100 105 32 84 111 109 97 382 97 32 68 111 109 105 99 101 108 106 97 44 32 100 97 32 98 105 32 106 105 109 32 107 111 116 32 269 108 111 118 101 107 32 115 32 112 111 115 108 117 104 111 109 32 112 111 118 101 100 97 108 44 32 107 97 107 111 32 115 111 32 116 101 32 114 101 269 105 32 117 114 101 106 101 110 101 32 118 32 115 111 114 111 100 110 105 32 98 114 97 110 382 105 46 32 78 106 101 103 111 118 111 32 112 114 101 100 97 118 97 110 106 101 32 115 101 109 32 122 97 109 117 100 105 108 44 32 115 101 109 32 112 97 32 112 111 122 110 101 106 101 32 115 108 105 353 97 108 32 110 106 101 103 111 118 111 32 112 114 105 108 111 382 110 111 115 116 110 111 32 114 101 112 108 105 107 111 32 111 32 112 114 111 100 97 110 105 104 32 110 97 107 108 97 100 97 104 32 110 111 115 105 108 99 101 118 32 122 118 111 107 97 46 32 80 114 101 100 32 100 101 115 101 116 105 109 105 44 32 112 101 116 110 97 106 115 116 105 109 105 44 32 100 118 97 106 115 101 116 105 109 105 32 108 101 116 105 44 32 106 101 32 112 111 118 101 100 97 108 44 32 115 111 32 115 101 32 118 105 110 105 108 107 101 44 32 107 97 115 101 116 101 44 32 99 101 100 101 106 105 32 110 97 106 98 111 108 106 101 32 112 114 111 100 97 106 97 110 105 104 32 105 122 118 97 106 97 108 99 101 118 32 112 114 111 100 97 106 97 108 105 32 118 32 110 97 107 108 97 100 97 104 32 111 107 111 108 105 32 49 48 48 46 48 48 48 32 105 122 118 111 100 111 118 44 32 116 117 100 105 32 118 101 269 46 32 68 97 110 101 115 32 110 105 116 105 32 110 97 106 98 111 108 106 32 112 111 112 117 108 97 114 110 97 32 353 116 97 110 99 97 32 110 101 32 112 114 101 115 101 382 101 32 110 105 116 105 32 269 101 116 114 116 105 110 101 32 116 101 32 110 97 107 108 97 100 101 46 32 76 106 117 100 106 101 32 115 111 32 112 111 115 116 97 108 105 32 116 97 107 111 32 34 112 97 109 101 116 110 105 34 44 32 100 97 32 115 105 32 103 108 97 115 98 111 32 122 97 115 116 111 110 106 32 100 111 119 110 108 111 97 100 97 106 111 32 122 32 105 110 116 101 114 110 101 116 97 33 13 10 83 108 111 118 101 110 105 106 97 32 106 101 32 109 111 114 100 97 32 110 97 112 114 101 100 111 118 97 108 97 44 32 107 97 114 32 122 97 100 101 118 97 32 98 111 106 32 112 114 111 116 105 32 117 112 111 114 97 98 105 32 112 105 114 97 116 115 107 101 103 97 32 115 111 102 116 118 101 114 97 46 32 71 108 101 100 101 32 103 108 97 115 98 101 32 112 97 32 106 101 32 353 101 32 118 101 100 110 111 32 122 97 100 110 106 105 32 84 101 107 115 97 115 32 45 32 111 112 114 111 115 116 105 116 101 44 32 75 105 116 97 106 115 107 97 46 32 74 101 32 112 97 32 100 111 115 101 382 101 107 44 32 100 97 32 112 105 114 97 116 105 122 105 114 97 110 101 32 103 108 97 115 98 101 32 110 105 104 269 101 32 118 101 269 32 110 101 32 112 114 111 100 97 106 97 32 106 97 118 110 111 32 110 97 32 353 116 97 110 116 105 104 46 13 10 90 97 108 111 382 110 105 107 105 32 105 109 97 106 111 32 116 97 32 112 114 97 115 116 114 97 104 44 32 100 97 32 98 105 32 115 105 32 111 100 382 105 114 97 108 105 32 107 114 117 104 44 32 269 101 32 98 105 32 107 110 106 105 103 101 32 45 32 112 111 108 101 103 32 116 105 115 107 97 110 105 104 32 97 108 105 32 110 97 109 101 115 116 111 32 116 105 115 107 97 110 105 104 32 45 32 100 97 106 97 108 105 32 110 97 32 105 110 116 101 114 110 101 116 32 116 117 100 105 32 100 105 103 105 116 97 108 105 122 105 114 97 110 101 32 40 112 114 101 115 108 105 107 97 110 101 44 32 112 114 101 116 105 112 107 97 110 101 41 46 32 80 111 32 109 111 106 101 109 32 103 114 101 32 122 97 32 112 111 109 111 116 111 44 32 107 105 32 110 101 32 117 112 111 353 116 101 118 97 32 114 97 122 108 105 107 32 109 101 100 32 107 110 106 105 103 111 32 105 110 32 103 108 97 115 98 111 46 32 71 108 97 115 98 101 110 97 32 112 117 98 108 105 107 97 32 115 101 32 122 32 117 112 111 114 97 98 110 105 107 105 32 105 110 116 101 114 110 101 116 97 32 112 114 101 107 114 105 118 97 32 115 107 111 114 97 106 32 118 32 99 101 108 111 116 105 44 32 107 117 112 99 105 32 107 110 106 105 103 32 112 97 32 108 101 32 107 111 109 97 106 100 97 59 32 103 108 97 115 98 111 32 106 101 32 122 97 32 114 97 122 108 105 107 111 32 111 100 32 108 105 116 101 114 97 116 117 114 101 32 109 111 103 111 269 101 32 107 111 110 122 117 109 105 114 97 116 105 32 115 107 111 114 97 106 32 107 106 101 114 107 111 108 105 32 105 110 32 107 97 100 97 114 107 111 108 105 59 32 103 108 97 115 98 101 110 97 32 112 117 98 108 105 107 97 32 115 97 109 97 32 115 101 32 118 32 116 114 382 110 101 109 32 112 111 118 112 114 101 269 106 117 32 105 110 32 112 111 32 382 105 118 108 106 101 110 106 115 107 105 104 32 110 97 118 97 100 97 104 32 98 105 115 116 118 101 110 111 32 114 97 122 108 105 107 117 106 101 32 111 100 32 107 110 106 105 382 110 101 44 32 107 105 32 106 101 32 98 111 108 106 32 107 117 108 116 105 118 105 114 97 110 97 32 105 110 32 107 117 112 110 111 32 109 111 269 110 101 106 353 97 44 32 112 97 32 116 117 100 105 32 107 111 110 115 101 114 118 97 116 105 118 110 101 106 353 97 46 13 10 80 114 101 100 110 111 115 116 32 107 110 106 105 103 32 112 114 101 100 32 103 108 97 115 98 111 32 45 32 105 110 32 101 100 101 110 32 112 111 109 101 109 98 110 101 106 353 105 104 32 114 97 122 108 111 103 111 118 32 122 97 32 100 105 103 105 116 97 108 105 122 97 99 105 106 111 32 107 110 106 105 103 32 45 32 112 97 32 106 101 32 116 117 100 105 32 118 32 116 101 109 44 32 100 97 32 118 32 118 101 108 105 107 105 32 109 101 114 105 32 112 114 97 118 32 110 97 32 110 106 105 104 32 116 101 109 101 108 106 105 32 100 114 117 382 98 97 32 122 110 97 110 106 97 46 32 73 110 32 110 97 32 116 111 32 106 101 32 111 112 111 122 111 114 105 108 32 84 117 114 107 46 32 352 101 32 118 101 269 58 32 114 101 107 101 108 32 106 101 44 32 100 97 32 110 101 32 118 105 100 105 32 114 97 122 108 111 103 97 44 32 100 97 32 107 110 106 105 103 101 32 110 101 32 98 ) asWordArray asTwoByteString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 14:54'!byteAtPutTime	"self new byteAtPutTime  '43'"	| text ch1 ch2 ch3 ch4 ch5 |	text := self englishText. 	ch1 := 24 asCharacter. ch2 := 231 asCharacter. ch3 := 132 asCharacter. "just something"	ch4 := 32 asCharacter. ch5 := 53 asCharacter. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100 put: ch1;			at: 400 put: ch2;			at: 800 put: ch3;			at: 1000 put: ch4;			at: 2000 put: ch5.		]]) printString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 14:54'!byteAtTime	"self new byteAtTime '440' "	| text  |	text := self slovenianText. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100; 			at: 400; 			at: 800; 			at: 1000;			at: 2000.		]]) printString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 15:05'!fourByteAtPutTime	"self new fourByteAtPutTime  '164'"	| text ch1 ch2 ch3 ch4 ch5 |	text := self chineseText asFourByteString. 	ch1 := 6454 asCharacter. ch2 := 21234 asCharacter. ch3 := 2423 asCharacter. "just something"	ch4 := 523 asCharacter. ch5 := 4324 asCharacter. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100 put: ch1;			at: 400 put: ch2;			at: 800 put: ch3;			at: 1000 put: ch4;			at: 2000 put: ch5.		]]) printString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 15:05'!fourByteAtTime	"self new fourByteAtTime '196'"	| text  |	text := self chineseText asFourByteString. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100; 			at: 400; 			at: 800; 			at: 1000;			at: 2000.		]]) printString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 14:54'!twoByteAtPutTime	"self new twoByteAtPutTime '384' '208' '386'"	| text ch1 ch2 ch3 ch4 ch5 |	text := self slovenianText. 	ch1 := 454 asCharacter. ch2 := 1234 asCharacter. ch3 := 2423 asCharacter. "just something"	ch4 := 523 asCharacter. ch5 := 324 asCharacter. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100 put: ch1;			at: 400 put: ch2;			at: 800 put: ch3;			at: 1000 put: ch4;			at: 2000 put: ch5.		]]) printString! !!UnicodeBenchmarking methodsFor: 'string benchmarks' stamp: 'mivsek 6/12/2007 14:54'!twoByteAtTime	"self new twoByteAtTime '432' '291' '421'"	| text  |	text := self slovenianText. 	^(Time millisecondsToRun: [100000 timesRepeat: 		[text 			at: 100; 			at: 400; 			at: 800; 			at: 1000;			at: 2000.		]]) printString! !!UnicodeBenchmarking methodsFor: 'time profiling' stamp: 'mivsek 6/12/2007 14:58'!russianEncodingTimeProfile	"self new russianEncodingTimeProfile"	| text |	text := self russianText.	TimeProfileBrowser spyOn: [1000 timesRepeat: [text asUTF8String]]! !!UnicodeBenchmarking methodsFor: 'time profiling' stamp: 'mivsek 6/12/2007 14:54'!slovenianEncodingTimeProfile	"self new slovenianEncodingTimeProfile"	| text |	text := self slovenianText.	TimeProfileBrowser onBlock: [1000 timesRepeat: [text asUTF8String]]! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:52'!chineseEncoding2Time	"self new chineseEncoding2Time '3825'"	| text converter in out |	text := self chineseText.	^(Time millisecondsToRun: 		[100 timesRepeat: 			[converter := UTF8TextConverter new. 			in := text readStream.			out := WriteStream on: (String new: text size).			[in atEnd] whileFalse: [converter nextPut: in next toStream: out].			out contents]	     ]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:52'!chineseEncodingTime	"self new chineseEncodingTime '560' '395' '562' '3825'"	| text |	text := self chineseText.	^(Time millisecondsToRun: [100 timesRepeat: [text asUTF8String]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:52'!englishCopyTime	"self new englishCopyTime '3'"	| text |	text := self englishText.	^(Time millisecondsToRun: [100 timesRepeat: [text copy]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!englishEncoding2Time	"self new englishEncoding2Time '313'"	| text converter in out |	text := self englishText.	^(Time millisecondsToRun: 		[100 timesRepeat: 			[converter := UTF8TextConverter new. 			in := text readStream.			out := WriteStream on: (String new: text size).			[in atEnd] whileFalse: [converter nextPut: in next toStream: out].			out contents]	     ]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!englishEncodingTime	"self new englishEncodingTime '106' '248'"	| text |	text := self englishText.	^(Time millisecondsToRun: [100 timesRepeat: [text asUTF8String]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!frenchCopyTime	"self new frenchCopyTime '0'"	| text |	text := self frenchText.	^(Time millisecondsToRun: [100 timesRepeat: [text copy]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!frenchEncoding2Time	"self new frenchEncoding2Time '332'"	| text converter in out |	text := self frenchText.	^(Time millisecondsToRun: 		[100 timesRepeat: 			[converter := UTF8TextConverter new. 			in := text readStream.			out := WriteStream on: (String new: text size).			[in atEnd] whileFalse: [converter nextPut: in next toStream: out].			out contents]	     ]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!frenchEncodingTime	"self new frenchEncodingTime '114' '251'"	| text |	text := self frenchText.	^(Time millisecondsToRun: [100 timesRepeat: [text asUTF8String]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!russianEncoding2Time	"self new russianEncoding2Time '1306' '719'"	| text converter in out |	text := self russianText.	^(Time millisecondsToRun: 		[100 timesRepeat: 			[converter := UTF8TextConverter new. 			in := text readStream.			out := WriteStream on: (String new: text size).			[in atEnd] whileFalse: [converter nextPut: in next toStream: out].			out contents]	     ]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!russianEncodingTime	"self new russianEncodingTime '472' '346' '457' '719'"	| text |	text := self russianText.	^(Time millisecondsToRun: [100 timesRepeat: [text asUTF8String]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:53'!slovenianCopyTime	"self new slovenianCopyTime '372'"	| text |	text := self slovenianText.	^(Time millisecondsToRun: [100 timesRepeat: [text copy]]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:54'!slovenianEncoding2Time	"self new slovenianEncoding2Time '578'"	| text converter in out |	text := self slovenianText.	^(Time millisecondsToRun: 		[100 timesRepeat: 			[converter := UTF8TextConverter new. 			in := text readStream.			out := WriteStream on: (String new: text size).			[in atEnd] whileFalse: [converter nextPut: in next toStream: out].			out contents]	     ]) printString! !!UnicodeBenchmarking methodsFor: 'utf8 encoding' stamp: 'mivsek 6/12/2007 14:54'!slovenianEncodingTime	"self new slovenianEncodingTime '361' '286' '359' '480'"	| text |	text := self slovenianText.	^(Time millisecondsToRun: [100 timesRepeat: [text asUTF8String]]) printString! !!WordArray methodsFor: 'converting' stamp: 'mivsek 6/12/2007 14:40'!asTwoByteString	^TwoByteString fromWordArray: self ! !!WriteStream methodsFor: 'accessing' stamp: 'mivsek 6/12/2007 15:32'!nextPut: anObject 	"Primitive. Insert the argument at the next position in the Stream	represented by the receiver. Fail if the collection of this stream is not an	Array or a String. Fail if the stream is positioned at its end, or if the	position is out of bounds in the collection. Fail if the argument is not	of the right type for the collection. Optional. See Object documentation	whatIsAPrimitive."	<primitive: 66>	((collection class == ByteString) and: [		anObject isCharacter and:[anObject isOctetCharacter not]]) ifTrue: 			[collection := anObject isTwoByteCharacter				ifTrue: [TwoByteString from: collection]				ifFalse: [FourByteString from: collection]. 			^self nextPut: anObject. 			].	position >= writeLimit		ifTrue: [^ self pastEndPut: anObject]		ifFalse: 			[position _ position + 1.			^collection at: position put: anObject]! !!MultiByteBinaryOrTextStream methodsFor: 'public' stamp: 'mivsek 6/12/2007 15:32'!next: anInteger 	| multiString |	"self halt."	self isBinary ifTrue: [^ (super next: anInteger) asByteArray].	multiString _ FourByteString new: anInteger.	1 to: anInteger do: [:index |		| character |		(character _ self next) ifNotNil: [			multiString at: index put: character		] ifNil: [			multiString _ multiString copyFrom: 1 to: index - 1.			^ multiString		]	].	^ multiString.! !UnicodeBenchmarking removeSelector: #chineseTextEncoding2Time!UnicodeBenchmarking removeSelector: #chineseTextEncodingTime!UnicodeBenchmarking removeSelector: #englishTextCopyTime!UnicodeBenchmarking removeSelector: #englishTextEncoding2Time!UnicodeBenchmarking removeSelector: #englishTextEncodingTime!UnicodeBenchmarking removeSelector: #frenchTextCopyTime!UnicodeBenchmarking removeSelector: #frenchTextEncoding2Time!UnicodeBenchmarking removeSelector: #frenchTextEncodingTime!UnicodeBenchmarking removeSelector: #russianTextEncoding2Time!UnicodeBenchmarking removeSelector: #russianTextEncodingTime!UnicodeBenchmarking removeSelector: #slovenianTextCopyTime!UnicodeBenchmarking removeSelector: #slovenianTextEncoding2Time!UnicodeBenchmarking removeSelector: #slovenianTextEncodingProfile!UnicodeBenchmarking removeSelector: #slovenianTextEncodingTime!UnicodeBenchmarking removeSelector: #slovenianTextEncodingTimeProfile!!UnicodeBenchmarking reorganize!('example texts' chineseText englishText frenchText percentNonASCII: russianText slovenianText)('string benchmarks' byteAtPutTime byteAtTime fourByteAtPutTime fourByteAtTime twoByteAtPutTime twoByteAtTime)('time profiling' russianEncodingTimeProfile slovenianEncodingTimeProfile)('utf8 encoding' chineseEncoding2Time chineseEncodingTime englishCopyTime englishEncoding2Time englishEncodingTime frenchCopyTime frenchEncoding2Time frenchEncodingTime russianEncoding2Time russianEncodingTime slovenianCopyTime slovenianEncoding2Time slovenianEncodingTime)!UTF8EncodingTest removeSelector: #testLAtin2!UTF8EncodingTest removeSelector: #testUtf8!!UTF8EncodingTest reorganize!('tests' testLatin1 testLatin2)!!TwoByteSymbol reorganize!('accessing' at: at:put: species)('private' pvtAt:put: string:)!TwoByteStringTest removeSelector: #conversionsTest!TwoByteStringTest removeSelector: #sizesTest!TwoByteStringTest removeSelector: #sizezTest!TwoByteStringTest removeSelector: #testCconversions!TwoByteStringTest removeSelector: #testUtf8!TwoByteStringTest removeSelector: #utf8Test!!TwoByteStringTest reorganize!('tests' testConversions testSizes)!TwoByteString removeSelector: #byteAt:!TwoByteString removeSelector: #byteAt:put:!TwoByteString removeSelector: #byteStream!!TwoByteString reorganize!('private' byteSize indexOfSubCollection:startingAt:ifAbsent: printString replaceFrom:to:with:startingAt:)('accessing' at: at:put: size)('converting' asByteString asFourByteString asTwoByteString asUTF8String)('testing' isTwoByteString)!FourByteSymbol removeSelector: #isWideString!!FourByteSymbol reorganize!('accessing' at: at:put: byteAt: byteAt:put: byteSize species wordAt: wordAt:put:)('private' fixUponLoad:seg: mutateJISX0208StringToUnicode pvtAt:put: string:)!FourByteString removeSelector: #isWideString!String removeSelector: #asWideString!String removeSelector: #isWideString!!Character class reorganize!('accessing untypeable characters' arrowDown arrowLeft arrowRight arrowUp backspace cr delete end enter escape euro home insert lf linefeed nbsp newPage pageDown pageUp space tab)('class initialization' initialize initializeClassificationTable)('constants' alphabet characterTable)('instance creation' allByteCharacters allCharacters codePoint: digitValue: leadingChar:code: new separators value:)('private' constantNameFor: constantNames valueFromInteger:)!ByteArray removeSelector: #asWideString!