'From Pharo2.0a of ''18 April 2012'' [Latest update: #20534] on 11 February 2013 at 7:52:09 pm'!ZnCharacterEncoder subclass: #ZnUTF8Encoder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Zinc-Character-Encoding-Core'!!ZnUTF8Encoder commentStamp: 'SvenVanCaekenberghe 12/6/2010 12:55' prior: 0!I am ZnUTF8Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-8 encoding and decoding of Unicode according to RFC 3629.Part of Zinc HTTP Components.!!ZnUTF8Encoder methodsFor: 'converting' stamp: 'SvenVanCaekenberghe 11/29/2010 21:23'!encodedByteCountFor: character	| code |	code := character charCode.	code < 128 ifTrue: [ ^ 1 ].	code < 2048 ifTrue: [ ^ 2 ].	code < 65535 ifTrue: [ ^ 3 ].	code <= self maximumUTF8Code ifTrue: [ ^ 4 ].	self error: 'Unicode character code point outside range'! !!ZnUTF8Encoder methodsFor: 'converting' stamp: 'SvenVanCaekenberghe 12/3/2012 14:25'!nextFromStream: stream	| code byte next |	(byte := stream next) < 128		ifTrue: [ ^ Character codePoint: byte ].	(byte bitAnd: 2r11100000) == 2r11000000		ifTrue: [ 			code := byte bitAnd: 2r00011111.			((next := stream next) bitAnd: 2r11000000) == 2r10000000				ifTrue: [ code := (code bitShift: 6) + (next bitAnd: 2r00111111) ]				ifFalse: [ ^ self error: 'illegal UTF-8 encoding' ].			^ Character codePoint: code ].	(byte bitAnd: 2r11110000) == 2r11100000		ifTrue: [ 			code := byte bitAnd: 2r00001111.			2 timesRepeat: [ 				((next := stream next) bitAnd: 2r11000000) == 2r10000000					ifTrue: [ code := (code bitShift: 6) + (next bitAnd: 2r00111111) ]					ifFalse: [ ^ self error: 'illegal UTF-8 encoding' ] ].			^ Character codePoint: code ].	(byte bitAnd: 2r11111000) == 2r11110000		ifTrue: [ 			code := byte bitAnd: 2r00000111.			3 timesRepeat: [ 				((next := stream next) bitAnd: 2r11000000) == 2r10000000					ifTrue: [ code := (code bitShift: 6) + (next bitAnd: 2r00111111) ]					ifFalse: [ ^ self error: 'illegal UTF-8 encoding' ] ].			^ Character codePoint: code ].	self error: 'illegal UTF-8 encoding'! !!ZnUTF8Encoder methodsFor: 'converting' stamp: 'SvenVanCaekenberghe 12/16/2012 15:20'!nextPut: character toStream: stream	| code |	code := character codePoint.	code < 128 ifTrue: [ 		^ stream nextPut: code ].	code < 2048 ifTrue: [ 		^ stream 			nextPut: (2r11000000 + (code bitShift: -6)); 			nextPut: (2r10000000 + (code bitAnd: 2r111111)) ].	code < 65535 ifTrue: [ 		^ stream 			nextPut: (2r11100000 + (code bitShift: -12));			nextPut: (2r10000000 + ((code bitShift: -6) bitAnd: 2r111111)); 			nextPut: (2r10000000 + (code bitAnd: 2r111111)) ].	code <= self maximumUTF8Code ifTrue: [ 		^ stream 			nextPut: (2r11110000 + (code bitShift: -18));			nextPut: (2r10000000 + (code bitShift: -12));			nextPut: (2r10000000 + ((code bitShift: -6) bitAnd: 2r111111)); 			nextPut: (2r10000000 + (code bitAnd: 2r111111)) ].	self error: 'Unicode character code point outside range'! !!ZnUTF8Encoder methodsFor: 'private' stamp: 'SvenVanCaekenberghe 11/29/2010 21:19'!maximumUTF8Code	^ 16r10FFFF! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZnUTF8Encoder class	instanceVariableNames: ''!!ZnUTF8Encoder class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/25/2011 11:11'!handlesEncoding: string	"Return true when my instances handle the encoding described by string"		^ #( 'utf-8' 'utf8' ) includes: string! !!ZnUTF8Encoder class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/25/2011 11:19'!newForEncoding: string	"No further parametrization needed"		^ self new! !